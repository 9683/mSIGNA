// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "CoinQ_vault_db-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/view-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>
#include <odb/sqlite/view-result.hxx>

namespace odb
{
  // BlockHeader
  //

  access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // hash_
    //
    if (t[1UL])
    {
      i.hash_value.capacity (i.hash_size);
      grew = true;
    }

    // height_
    //
    t[2UL] = false;

    // version_
    //
    t[3UL] = false;

    // prevhash_
    //
    if (t[4UL])
    {
      i.prevhash_value.capacity (i.prevhash_size);
      grew = true;
    }

    // merkleroot_
    //
    if (t[5UL])
    {
      i.merkleroot_value.capacity (i.merkleroot_size);
      grew = true;
    }

    // timestamp_
    //
    t[6UL] = false;

    // bits_
    //
    t[7UL] = false;

    // nonce_
    //
    t[8UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // hash_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.hash_value.data ();
    b[n].size = &i.hash_size;
    b[n].capacity = i.hash_value.capacity ();
    b[n].is_null = &i.hash_null;
    n++;

    // height_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.height_value;
    b[n].is_null = &i.height_null;
    n++;

    // version_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.version_value;
    b[n].is_null = &i.version_null;
    n++;

    // prevhash_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.prevhash_value.data ();
    b[n].size = &i.prevhash_size;
    b[n].capacity = i.prevhash_value.capacity ();
    b[n].is_null = &i.prevhash_null;
    n++;

    // merkleroot_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.merkleroot_value.data ();
    b[n].size = &i.merkleroot_size;
    b[n].capacity = i.merkleroot_value.capacity ();
    b[n].is_null = &i.merkleroot_null;
    n++;

    // timestamp_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.timestamp_value;
    b[n].is_null = &i.timestamp_null;
    n++;

    // bits_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.bits_value;
    b[n].is_null = &i.bits_null;
    n++;

    // nonce_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.nonce_value;
    b[n].is_null = &i.nonce_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // hash_
    //
    {
      ::bytes_t const& v =
        o.hash_;

      bool is_null (false);
      std::size_t cap (i.hash_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.hash_value,
        i.hash_size,
        is_null,
        v);
      i.hash_null = is_null;
      grew = grew || (cap != i.hash_value.capacity ());
    }

    // height_
    //
    {
      ::uint32_t const& v =
        o.height_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.height_value,
        is_null,
        v);
      i.height_null = is_null;
    }

    // version_
    //
    {
      ::uint32_t const& v =
        o.version_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.version_value,
        is_null,
        v);
      i.version_null = is_null;
    }

    // prevhash_
    //
    {
      ::bytes_t const& v =
        o.prevhash_;

      bool is_null (false);
      std::size_t cap (i.prevhash_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.prevhash_value,
        i.prevhash_size,
        is_null,
        v);
      i.prevhash_null = is_null;
      grew = grew || (cap != i.prevhash_value.capacity ());
    }

    // merkleroot_
    //
    {
      ::bytes_t const& v =
        o.merkleroot_;

      bool is_null (false);
      std::size_t cap (i.merkleroot_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.merkleroot_value,
        i.merkleroot_size,
        is_null,
        v);
      i.merkleroot_null = is_null;
      grew = grew || (cap != i.merkleroot_value.capacity ());
    }

    // timestamp_
    //
    {
      ::uint32_t const& v =
        o.timestamp_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.timestamp_value,
        is_null,
        v);
      i.timestamp_null = is_null;
    }

    // bits_
    //
    {
      ::uint32_t const& v =
        o.bits_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.bits_value,
        is_null,
        v);
      i.bits_null = is_null;
    }

    // nonce_
    //
    {
      ::uint32_t const& v =
        o.nonce_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.nonce_value,
        is_null,
        v);
      i.nonce_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // hash_
    //
    {
      ::bytes_t& v =
        o.hash_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.hash_value,
        i.hash_size,
        i.hash_null);
    }

    // height_
    //
    {
      ::uint32_t& v =
        o.height_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.height_value,
        i.height_null);
    }

    // version_
    //
    {
      ::uint32_t& v =
        o.version_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.version_value,
        i.version_null);
    }

    // prevhash_
    //
    {
      ::bytes_t& v =
        o.prevhash_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.prevhash_value,
        i.prevhash_size,
        i.prevhash_null);
    }

    // merkleroot_
    //
    {
      ::bytes_t& v =
        o.merkleroot_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.merkleroot_value,
        i.merkleroot_size,
        i.merkleroot_null);
    }

    // timestamp_
    //
    {
      ::uint32_t& v =
        o.timestamp_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.timestamp_value,
        i.timestamp_null);
    }

    // bits_
    //
    {
      ::uint32_t& v =
        o.bits_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.bits_value,
        i.bits_null);
    }

    // nonce_
    //
    {
      ::uint32_t& v =
        o.nonce_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.nonce_value,
        i.nonce_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::persist_statement[] =
  "INSERT INTO \"BlockHeader\" ("
  "\"id\","
  "\"hash\","
  "\"height\","
  "\"version\","
  "\"prevhash\","
  "\"merkleroot\","
  "\"timestamp\","
  "\"bits\","
  "\"nonce\")"
  " VALUES (?,?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::find_statement[] =
  "SELECT "
  "\"BlockHeader\".\"id\","
  "\"BlockHeader\".\"hash\","
  "\"BlockHeader\".\"height\","
  "\"BlockHeader\".\"version\","
  "\"BlockHeader\".\"prevhash\","
  "\"BlockHeader\".\"merkleroot\","
  "\"BlockHeader\".\"timestamp\","
  "\"BlockHeader\".\"bits\","
  "\"BlockHeader\".\"nonce\""
  " FROM \"BlockHeader\""
  " WHERE \"BlockHeader\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::update_statement[] =
  "UPDATE \"BlockHeader\" SET "
  "\"hash\"=?,"
  "\"height\"=?,"
  "\"version\"=?,"
  "\"prevhash\"=?,"
  "\"merkleroot\"=?,"
  "\"timestamp\"=?,"
  "\"bits\"=?,"
  "\"nonce\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::erase_statement[] =
  "DELETE FROM \"BlockHeader\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::query_statement[] =
  "SELECT "
  "\"BlockHeader\".\"id\","
  "\"BlockHeader\".\"hash\","
  "\"BlockHeader\".\"height\","
  "\"BlockHeader\".\"version\","
  "\"BlockHeader\".\"prevhash\","
  "\"BlockHeader\".\"merkleroot\","
  "\"BlockHeader\".\"timestamp\","
  "\"BlockHeader\".\"bits\","
  "\"BlockHeader\".\"nonce\""
  " FROM \"BlockHeader\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"BlockHeader\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::table_name[] =
  "\"BlockHeader\"";

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"BlockHeader\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"BlockHeader\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hash\" BLOB NOT NULL,\n"
                      "  \"height\" INTEGER NOT NULL,\n"
                      "  \"version\" INTEGER NOT NULL,\n"
                      "  \"prevhash\" BLOB NOT NULL,\n"
                      "  \"merkleroot\" BLOB NOT NULL,\n"
                      "  \"timestamp\" INTEGER NOT NULL,\n"
                      "  \"bits\" INTEGER NOT NULL,\n"
                      "  \"nonce\" INTEGER NOT NULL)");
          db.execute ("CREATE UNIQUE INDEX \"BlockHeader_hash_i\"\n"
                      "  ON \"BlockHeader\" (\"hash\")");
          db.execute ("CREATE UNIQUE INDEX \"BlockHeader_height_i\"\n"
                      "  ON \"BlockHeader\" (\"height\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_BlockHeader_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::create_schema);

  // MerkleBlock
  //

  const char alias_traits<  ::CoinQ::Vault::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::blockheader_tag>::
  table_name[] = "\"blockheader\"";

  // hashes_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  select_statement[] =
  "SELECT "
  "\"MerkleBlock_hashes\".\"index\","
  "\"MerkleBlock_hashes\".\"value\""
  " FROM \"MerkleBlock_hashes\""
  " WHERE \"MerkleBlock_hashes\".\"object_id\"=?"
  " ORDER BY \"MerkleBlock_hashes\".\"index\"";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  insert_statement[] =
  "INSERT INTO \"MerkleBlock_hashes\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  delete_statement[] =
  "DELETE FROM \"MerkleBlock_hashes\""
  " WHERE \"object_id\"=?";

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = d.value_value.data ();
    b[n].size = &d.value_size;
    b[n].capacity = d.value_value.capacity ();
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    if (t[1UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  init (data_image_type& i, index_type* j, const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      bool is_null (false);
      std::size_t cap (i.value_value.capacity ());
      sqlite::value_traits<
          value_type,
          sqlite::id_blob >::set_image (
        i.value_value,
        i.value_size,
        is_null,
        v);
      i.value_null = is_null;
      grew = grew || (cap != i.value_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  init (index_type& j, value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      sqlite::value_traits<
          value_type,
          sqlite::id_blob >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  persist (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  update (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::hashes_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // blockheader_
    //
    t[1UL] = false;

    // txcount_
    //
    t[2UL] = false;

    // flags_
    //
    if (t[3UL])
    {
      i.flags_value.capacity (i.flags_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // blockheader_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.blockheader_value;
    b[n].is_null = &i.blockheader_null;
    n++;

    // txcount_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txcount_value;
    b[n].is_null = &i.txcount_null;
    n++;

    // flags_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.flags_value.data ();
    b[n].size = &i.flags_size;
    b[n].capacity = i.flags_value.capacity ();
    b[n].is_null = &i.flags_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // blockheader_
    //
    {
      ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > const& v =
        o.blockheader_;

      typedef object_traits< ::CoinQ::Vault::BlockHeader > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.blockheader_value,
          is_null,
          id);
        i.blockheader_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // txcount_
    //
    {
      ::uint32_t const& v =
        o.txcount_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.txcount_value,
        is_null,
        v);
      i.txcount_null = is_null;
    }

    // flags_
    //
    {
      ::bytes_t const& v =
        o.flags_;

      bool is_null (false);
      std::size_t cap (i.flags_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.flags_value,
        i.flags_size,
        is_null,
        v);
      i.flags_null = is_null;
      grew = grew || (cap != i.flags_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // blockheader_
    //
    {
      ::std::shared_ptr< ::CoinQ::Vault::BlockHeader >& v =
        o.blockheader_;

      typedef object_traits< ::CoinQ::Vault::BlockHeader > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > > ptr_traits;

      if (i.blockheader_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.blockheader_value,
          i.blockheader_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // txcount_
    //
    {
      ::uint32_t& v =
        o.txcount_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txcount_value,
        i.txcount_null);
    }

    // flags_
    //
    {
      ::bytes_t& v =
        o.flags_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.flags_value,
        i.flags_size,
        i.flags_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::container_statement_cache_type
  {
    sqlite::container_statements_impl< hashes_traits > hashes_;

    container_statement_cache_type (
      sqlite::connection& c,
      sqlite::binding& id)
    : hashes_ (c, id)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::persist_statement[] =
  "INSERT INTO \"MerkleBlock\" ("
  "\"id\","
  "\"blockheader\","
  "\"txcount\","
  "\"flags\")"
  " VALUES (?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::find_statement[] =
  "SELECT "
  "\"MerkleBlock\".\"id\","
  "\"MerkleBlock\".\"blockheader\","
  "\"MerkleBlock\".\"txcount\","
  "\"MerkleBlock\".\"flags\""
  " FROM \"MerkleBlock\""
  " WHERE \"MerkleBlock\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::update_statement[] =
  "UPDATE \"MerkleBlock\" SET "
  "\"blockheader\"=?,"
  "\"txcount\"=?,"
  "\"flags\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::erase_statement[] =
  "DELETE FROM \"MerkleBlock\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::query_statement[] =
  "SELECT "
  "\"MerkleBlock\".\"id\","
  "\"MerkleBlock\".\"blockheader\","
  "\"MerkleBlock\".\"txcount\","
  "\"MerkleBlock\".\"flags\""
  " FROM \"MerkleBlock\""
  " LEFT JOIN \"BlockHeader\" AS \"blockheader\" ON \"blockheader\".\"id\"=\"MerkleBlock\".\"blockheader\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"MerkleBlock\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::table_name[] =
  "\"MerkleBlock\"";

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // hashes_
    //
    {
      ::std::vector< ::std::vector< unsigned char > > const& v =
        obj.hashes_;

      hashes_traits::persist (
        v,
        sts.container_statment_cache ().hashes_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    // hashes_
    //
    {
      ::std::vector< ::std::vector< unsigned char > > const& v =
        obj.hashes_;

      hashes_traits::update (
        v,
        sts.container_statment_cache ().hashes_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // hashes_
    //
    hashes_traits::erase (
      sts.container_statment_cache ().hashes_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  load_ (statements_type& sts, object_type& obj)
  {
    // hashes_
    //
    {
      ::std::vector< ::std::vector< unsigned char > >& v =
        obj.hashes_;

      hashes_traits::load (
        v,
        sts.container_statment_cache ().hashes_);
    }
  }

  result< access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"MerkleBlock_hashes\"");
          db.execute ("DROP TABLE IF EXISTS \"MerkleBlock\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"MerkleBlock\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"blockheader\" INTEGER NOT NULL,\n"
                      "  \"txcount\" INTEGER NOT NULL,\n"
                      "  \"flags\" BLOB NOT NULL,\n"
                      "  CONSTRAINT \"blockheader_fk\"\n"
                      "    FOREIGN KEY (\"blockheader\")\n"
                      "    REFERENCES \"BlockHeader\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"MerkleBlock_hashes\" (\n"
                      "  \"object_id\" INTEGER NOT NULL,\n"
                      "  \"index\" INTEGER NOT NULL,\n"
                      "  \"value\" BLOB NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"MerkleBlock\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"MerkleBlock_hashes_object_id_i\"\n"
                      "  ON \"MerkleBlock_hashes\" (\"object_id\")");
          db.execute ("CREATE INDEX \"MerkleBlock_hashes_index_i\"\n"
                      "  ON \"MerkleBlock_hashes\" (\"index\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_MerkleBlock_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::create_schema);

  // TxIn
  //

  const char alias_traits<  ::CoinQ::Vault::Tx,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::tx_tag>::
  table_name[] = "\"tx\"";

  const query_columns_base< ::CoinQ::Vault::TxIn, id_sqlite >::tx_type_
  query_columns_base< ::CoinQ::Vault::TxIn, id_sqlite >::tx;

  access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // outhash_
    //
    if (t[1UL])
    {
      i.outhash_value.capacity (i.outhash_size);
      grew = true;
    }

    // outindex_
    //
    t[2UL] = false;

    // script_
    //
    if (t[3UL])
    {
      i.script_value.capacity (i.script_size);
      grew = true;
    }

    // sequence_
    //
    t[4UL] = false;

    // tx_
    //
    t[5UL] = false;

    // txindex_
    //
    t[6UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // outhash_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.outhash_value.data ();
    b[n].size = &i.outhash_size;
    b[n].capacity = i.outhash_value.capacity ();
    b[n].is_null = &i.outhash_null;
    n++;

    // outindex_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.outindex_value;
    b[n].is_null = &i.outindex_null;
    n++;

    // script_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.script_value.data ();
    b[n].size = &i.script_size;
    b[n].capacity = i.script_value.capacity ();
    b[n].is_null = &i.script_null;
    n++;

    // sequence_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.sequence_value;
    b[n].is_null = &i.sequence_null;
    n++;

    // tx_
    //
    if (sk == statement_select)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.tx_value;
      b[n].is_null = &i.tx_null;
      n++;
    }

    // txindex_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txindex_value;
    b[n].is_null = &i.txindex_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // outhash_
    //
    {
      ::bytes_t const& v =
        o.outhash_;

      bool is_null (false);
      std::size_t cap (i.outhash_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.outhash_value,
        i.outhash_size,
        is_null,
        v);
      i.outhash_null = is_null;
      grew = grew || (cap != i.outhash_value.capacity ());
    }

    // outindex_
    //
    {
      ::uint32_t const& v =
        o.outindex_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.outindex_value,
        is_null,
        v);
      i.outindex_null = is_null;
    }

    // script_
    //
    {
      ::bytes_t const& v =
        o.script_;

      bool is_null (false);
      std::size_t cap (i.script_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.script_value,
        i.script_size,
        is_null,
        v);
      i.script_null = is_null;
      grew = grew || (cap != i.script_value.capacity ());
    }

    // sequence_
    //
    {
      ::uint32_t const& v =
        o.sequence_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.sequence_value,
        is_null,
        v);
      i.sequence_null = is_null;
    }

    // txindex_
    //
    {
      ::uint32_t const& v =
        o.txindex_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.txindex_value,
        is_null,
        v);
      i.txindex_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // outhash_
    //
    {
      ::bytes_t& v =
        o.outhash_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.outhash_value,
        i.outhash_size,
        i.outhash_null);
    }

    // outindex_
    //
    {
      ::uint32_t& v =
        o.outindex_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.outindex_value,
        i.outindex_null);
    }

    // script_
    //
    {
      ::bytes_t& v =
        o.script_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.script_value,
        i.script_size,
        i.script_null);
    }

    // sequence_
    //
    {
      ::uint32_t& v =
        o.sequence_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.sequence_value,
        i.sequence_null);
    }

    // tx_
    //
    {
      ::std::weak_ptr< ::CoinQ::Vault::Tx >& v =
        o.tx_;

      typedef object_traits< ::CoinQ::Vault::Tx > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::CoinQ::Vault::Tx > > ptr_traits;

      if (i.tx_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.tx_value,
          i.tx_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));

        if (odb::pointer_traits<ptr_traits::strong_pointer_type>::null_ptr (
              ptr_traits::lock (v)))
          throw session_required ();
      }
    }

    // txindex_
    //
    {
      ::uint32_t& v =
        o.txindex_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txindex_value,
        i.txindex_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::persist_statement[] =
  "INSERT INTO \"TxIn\" ("
  "\"id\","
  "\"outhash\","
  "\"outindex\","
  "\"script\","
  "\"sequence\","
  "\"txindex\")"
  " VALUES (?,?,?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::find_statement[] =
  "SELECT "
  "\"TxIn\".\"id\","
  "\"TxIn\".\"outhash\","
  "\"TxIn\".\"outindex\","
  "\"TxIn\".\"script\","
  "\"TxIn\".\"sequence\","
  "\"Tx_txins\".\"object_id\","
  "\"TxIn\".\"txindex\""
  " FROM \"TxIn\""
  " LEFT JOIN \"Tx_txins\" ON \"Tx_txins\".\"value\"=\"TxIn\".\"id\""
  " WHERE \"TxIn\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::update_statement[] =
  "UPDATE \"TxIn\" SET "
  "\"outhash\"=?,"
  "\"outindex\"=?,"
  "\"script\"=?,"
  "\"sequence\"=?,"
  "\"txindex\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::erase_statement[] =
  "DELETE FROM \"TxIn\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::query_statement[] =
  "SELECT "
  "\"TxIn\".\"id\","
  "\"TxIn\".\"outhash\","
  "\"TxIn\".\"outindex\","
  "\"TxIn\".\"script\","
  "\"TxIn\".\"sequence\","
  "\"Tx_txins\".\"object_id\","
  "\"TxIn\".\"txindex\""
  " FROM \"TxIn\""
  " LEFT JOIN \"Tx_txins\" ON \"Tx_txins\".\"value\"=\"TxIn\".\"id\""
  " LEFT JOIN \"Tx\" AS \"tx\" ON \"tx\".\"id\"=\"Tx_txins\".\"object_id\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"TxIn\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::table_name[] =
  "\"TxIn\"";

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"TxIn\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"TxIn\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"outhash\" BLOB NOT NULL,\n"
                      "  \"outindex\" INTEGER NOT NULL,\n"
                      "  \"script\" BLOB NOT NULL,\n"
                      "  \"sequence\" INTEGER NOT NULL,\n"
                      "  \"txindex\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_TxIn_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::create_schema);

  // TxOut
  //

  const char alias_traits<  ::CoinQ::Vault::Tx,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::tx_tag>::
  table_name[] = "\"tx\"";

  const char alias_traits<  ::CoinQ::Vault::TxIn,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::spent_tag>::
  table_name[] = "\"spent\"";

  const char alias_traits<  ::CoinQ::Vault::SigningScript,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::signingscript_tag>::
  table_name[] = "\"signingscript\"";

  const query_columns_base< ::CoinQ::Vault::TxOut, id_sqlite >::tx_type_
  query_columns_base< ::CoinQ::Vault::TxOut, id_sqlite >::tx;

  access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // value_
    //
    t[1UL] = false;

    // script_
    //
    if (t[2UL])
    {
      i.script_value.capacity (i.script_size);
      grew = true;
    }

    // tx_
    //
    t[3UL] = false;

    // txindex_
    //
    t[4UL] = false;

    // spent_
    //
    t[5UL] = false;

    // signingscript_
    //
    t[6UL] = false;

    // account_id_
    //
    t[7UL] = false;

    // type_
    //
    t[8UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // value_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.value_value;
    b[n].is_null = &i.value_null;
    n++;

    // script_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.script_value.data ();
    b[n].size = &i.script_size;
    b[n].capacity = i.script_value.capacity ();
    b[n].is_null = &i.script_null;
    n++;

    // tx_
    //
    if (sk == statement_select)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.tx_value;
      b[n].is_null = &i.tx_null;
      n++;
    }

    // txindex_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txindex_value;
    b[n].is_null = &i.txindex_null;
    n++;

    // spent_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.spent_value;
    b[n].is_null = &i.spent_null;
    n++;

    // signingscript_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.signingscript_value;
    b[n].is_null = &i.signingscript_null;
    n++;

    // account_id_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.account_id_value;
    b[n].is_null = &i.account_id_null;
    n++;

    // type_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // value_
    //
    {
      ::uint64_t const& v =
        o.value_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.value_value,
        is_null,
        v);
      i.value_null = is_null;
    }

    // script_
    //
    {
      ::bytes_t const& v =
        o.script_;

      bool is_null (false);
      std::size_t cap (i.script_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.script_value,
        i.script_size,
        is_null,
        v);
      i.script_null = is_null;
      grew = grew || (cap != i.script_value.capacity ());
    }

    // txindex_
    //
    {
      ::uint32_t const& v =
        o.txindex_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.txindex_value,
        is_null,
        v);
      i.txindex_null = is_null;
    }

    // spent_
    //
    {
      ::std::shared_ptr< ::CoinQ::Vault::TxIn > const& v =
        o.spent_;

      typedef object_traits< ::CoinQ::Vault::TxIn > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::CoinQ::Vault::TxIn > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.spent_value,
          is_null,
          id);
        i.spent_null = is_null;
      }
      else
        i.spent_null = true;
    }

    // signingscript_
    //
    {
      ::std::weak_ptr< ::CoinQ::Vault::SigningScript > const& v =
        o.signingscript_;

      typedef object_traits< ::CoinQ::Vault::SigningScript > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::CoinQ::Vault::SigningScript > > wptr_traits;
      typedef odb::pointer_traits< wptr_traits::strong_pointer_type > ptr_traits;

      wptr_traits::strong_pointer_type sp (wptr_traits::lock (v));
      bool is_null (ptr_traits::null_ptr (sp));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (sp)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.signingscript_value,
          is_null,
          id);
        i.signingscript_null = is_null;
      }
      else
        i.signingscript_null = true;
    }

    // account_id_
    //
    {
      ::CoinQ::Vault::null_id_t const& v =
        o.account_id_;

      bool is_null (true);
      sqlite::value_traits<
          ::CoinQ::Vault::null_id_t,
          sqlite::id_integer >::set_image (
        i.account_id_value,
        is_null,
        v);
      i.account_id_null = is_null;
    }

    // type_
    //
    {
      ::CoinQ::Vault::TxOut::type_t const& v =
        o.type_;

      bool is_null (false);
      sqlite::value_traits<
          ::CoinQ::Vault::TxOut::type_t,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // value_
    //
    {
      ::uint64_t& v =
        o.value_;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.value_value,
        i.value_null);
    }

    // script_
    //
    {
      ::bytes_t& v =
        o.script_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.script_value,
        i.script_size,
        i.script_null);
    }

    // tx_
    //
    {
      ::std::weak_ptr< ::CoinQ::Vault::Tx >& v =
        o.tx_;

      typedef object_traits< ::CoinQ::Vault::Tx > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::CoinQ::Vault::Tx > > ptr_traits;

      if (i.tx_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.tx_value,
          i.tx_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));

        if (odb::pointer_traits<ptr_traits::strong_pointer_type>::null_ptr (
              ptr_traits::lock (v)))
          throw session_required ();
      }
    }

    // txindex_
    //
    {
      ::uint32_t& v =
        o.txindex_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txindex_value,
        i.txindex_null);
    }

    // spent_
    //
    {
      ::std::shared_ptr< ::CoinQ::Vault::TxIn >& v =
        o.spent_;

      typedef object_traits< ::CoinQ::Vault::TxIn > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::CoinQ::Vault::TxIn > > ptr_traits;

      if (i.spent_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.spent_value,
          i.spent_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // signingscript_
    //
    {
      ::std::weak_ptr< ::CoinQ::Vault::SigningScript >& v =
        o.signingscript_;

      typedef object_traits< ::CoinQ::Vault::SigningScript > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::CoinQ::Vault::SigningScript > > ptr_traits;

      if (i.signingscript_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.signingscript_value,
          i.signingscript_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));

        if (odb::pointer_traits<ptr_traits::strong_pointer_type>::null_ptr (
              ptr_traits::lock (v)))
          throw session_required ();
      }
    }

    // account_id_
    //
    {
      ::CoinQ::Vault::null_id_t& v =
        o.account_id_;

      sqlite::value_traits<
          ::CoinQ::Vault::null_id_t,
          sqlite::id_integer >::set_value (
        v,
        i.account_id_value,
        i.account_id_null);
    }

    // type_
    //
    {
      ::CoinQ::Vault::TxOut::type_t& v =
        o.type_;

      sqlite::value_traits<
          ::CoinQ::Vault::TxOut::type_t,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::persist_statement[] =
  "INSERT INTO \"TxOut\" ("
  "\"id\","
  "\"value\","
  "\"script\","
  "\"txindex\","
  "\"spent\","
  "\"signingscript\","
  "\"account_id\","
  "\"type\")"
  " VALUES (?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::find_statement[] =
  "SELECT "
  "\"TxOut\".\"id\","
  "\"TxOut\".\"value\","
  "\"TxOut\".\"script\","
  "\"Tx_txouts\".\"object_id\","
  "\"TxOut\".\"txindex\","
  "\"TxOut\".\"spent\","
  "\"TxOut\".\"signingscript\","
  "\"TxOut\".\"account_id\","
  "\"TxOut\".\"type\""
  " FROM \"TxOut\""
  " LEFT JOIN \"Tx_txouts\" ON \"Tx_txouts\".\"value\"=\"TxOut\".\"id\""
  " WHERE \"TxOut\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::update_statement[] =
  "UPDATE \"TxOut\" SET "
  "\"value\"=?,"
  "\"script\"=?,"
  "\"txindex\"=?,"
  "\"spent\"=?,"
  "\"signingscript\"=?,"
  "\"account_id\"=?,"
  "\"type\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::erase_statement[] =
  "DELETE FROM \"TxOut\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::query_statement[] =
  "SELECT "
  "\"TxOut\".\"id\","
  "\"TxOut\".\"value\","
  "\"TxOut\".\"script\","
  "\"Tx_txouts\".\"object_id\","
  "\"TxOut\".\"txindex\","
  "\"TxOut\".\"spent\","
  "\"TxOut\".\"signingscript\","
  "\"TxOut\".\"account_id\","
  "\"TxOut\".\"type\""
  " FROM \"TxOut\""
  " LEFT JOIN \"Tx_txouts\" ON \"Tx_txouts\".\"value\"=\"TxOut\".\"id\""
  " LEFT JOIN \"Tx\" AS \"tx\" ON \"tx\".\"id\"=\"Tx_txouts\".\"object_id\""
  " LEFT JOIN \"TxIn\" AS \"spent\" ON \"spent\".\"id\"=\"TxOut\".\"spent\""
  " LEFT JOIN \"SigningScript\" AS \"signingscript\" ON \"signingscript\".\"id\"=\"TxOut\".\"signingscript\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"TxOut\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::table_name[] =
  "\"TxOut\"";

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"TxOut\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"TxOut\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"value\" INTEGER NOT NULL,\n"
                      "  \"script\" BLOB NOT NULL,\n"
                      "  \"txindex\" INTEGER NOT NULL,\n"
                      "  \"spent\" INTEGER,\n"
                      "  \"signingscript\" INTEGER,\n"
                      "  \"account_id\" INTEGER,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"spent_fk\"\n"
                      "    FOREIGN KEY (\"spent\")\n"
                      "    REFERENCES \"TxIn\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED,\n"
                      "  CONSTRAINT \"signingscript_fk\"\n"
                      "    FOREIGN KEY (\"signingscript\")\n"
                      "    REFERENCES \"SigningScript\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_TxOut_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::create_schema);

  // Tx
  //

  const char alias_traits<  ::CoinQ::Vault::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::blockheader_tag>::
  table_name[] = "\"blockheader\"";

  // txins_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  select_statement[] =
  "SELECT "
  "\"Tx_txins\".\"index\","
  "\"Tx_txins\".\"value\""
  " FROM \"Tx_txins\""
  " WHERE \"Tx_txins\".\"object_id\"=?"
  " ORDER BY \"Tx_txins\".\"index\"";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  insert_statement[] =
  "INSERT INTO \"Tx_txins\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  delete_statement[] =
  "DELETE FROM \"Tx_txins\""
  " WHERE \"object_id\"=?";

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    t[1UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  init (data_image_type& i, index_type* j, const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::TxIn > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.value_value,
          is_null,
          id);
        i.value_null = is_null;
      }
      else
        throw null_pointer ();
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  init (index_type& j, value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::TxIn > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  persist (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  update (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txins_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  // txouts_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  select_statement[] =
  "SELECT "
  "\"Tx_txouts\".\"index\","
  "\"Tx_txouts\".\"value\""
  " FROM \"Tx_txouts\""
  " WHERE \"Tx_txouts\".\"object_id\"=?"
  " ORDER BY \"Tx_txouts\".\"index\"";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  insert_statement[] =
  "INSERT INTO \"Tx_txouts\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  delete_statement[] =
  "DELETE FROM \"Tx_txouts\""
  " WHERE \"object_id\"=?";

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    t[1UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  init (data_image_type& i, index_type* j, const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::TxOut > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.value_value,
          is_null,
          id);
        i.value_null = is_null;
      }
      else
        throw null_pointer ();
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  init (index_type& j, value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::TxOut > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  persist (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  update (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::txouts_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // hash_
    //
    if (t[1UL])
    {
      i.hash_value.capacity (i.hash_size);
      grew = true;
    }

    // version_
    //
    t[2UL] = false;

    // locktime_
    //
    t[3UL] = false;

    // timestamp_
    //
    t[4UL] = false;

    // status_
    //
    t[5UL] = false;

    // have_fee_
    //
    t[6UL] = false;

    // fee_
    //
    t[7UL] = false;

    // blockheader_
    //
    t[8UL] = false;

    // blockindex_
    //
    t[9UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // hash_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.hash_value.data ();
    b[n].size = &i.hash_size;
    b[n].capacity = i.hash_value.capacity ();
    b[n].is_null = &i.hash_null;
    n++;

    // version_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.version_value;
    b[n].is_null = &i.version_null;
    n++;

    // locktime_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.locktime_value;
    b[n].is_null = &i.locktime_null;
    n++;

    // timestamp_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.timestamp_value;
    b[n].is_null = &i.timestamp_null;
    n++;

    // status_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.status_value;
    b[n].is_null = &i.status_null;
    n++;

    // have_fee_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.have_fee_value;
    b[n].is_null = &i.have_fee_null;
    n++;

    // fee_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fee_value;
    b[n].is_null = &i.fee_null;
    n++;

    // blockheader_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.blockheader_value;
    b[n].is_null = &i.blockheader_null;
    n++;

    // blockindex_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.blockindex_value;
    b[n].is_null = &i.blockindex_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // hash_
    //
    {
      ::bytes_t const& v =
        o.hash_;

      bool is_null (false);
      std::size_t cap (i.hash_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.hash_value,
        i.hash_size,
        is_null,
        v);
      i.hash_null = is_null;
      grew = grew || (cap != i.hash_value.capacity ());
    }

    // version_
    //
    {
      ::uint32_t const& v =
        o.version_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.version_value,
        is_null,
        v);
      i.version_null = is_null;
    }

    // locktime_
    //
    {
      ::uint32_t const& v =
        o.locktime_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.locktime_value,
        is_null,
        v);
      i.locktime_null = is_null;
    }

    // timestamp_
    //
    {
      ::uint32_t const& v =
        o.timestamp_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.timestamp_value,
        is_null,
        v);
      i.timestamp_null = is_null;
    }

    // status_
    //
    {
      ::CoinQ::Vault::Tx::status_t const& v =
        o.status_;

      bool is_null (false);
      sqlite::value_traits<
          ::CoinQ::Vault::Tx::status_t,
          sqlite::id_integer >::set_image (
        i.status_value,
        is_null,
        v);
      i.status_null = is_null;
    }

    // have_fee_
    //
    {
      bool const& v =
        o.have_fee_;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.have_fee_value,
        is_null,
        v);
      i.have_fee_null = is_null;
    }

    // fee_
    //
    {
      ::uint64_t const& v =
        o.fee_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.fee_value,
        is_null,
        v);
      i.fee_null = is_null;
    }

    // blockheader_
    //
    {
      ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > const& v =
        o.blockheader_;

      typedef object_traits< ::CoinQ::Vault::BlockHeader > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.blockheader_value,
          is_null,
          id);
        i.blockheader_null = is_null;
      }
      else
        i.blockheader_null = true;
    }

    // blockindex_
    //
    {
      ::odb::nullable< unsigned int > const& v =
        o.blockindex_;

      bool is_null (true);
      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_image (
        i.blockindex_value,
        is_null,
        v);
      i.blockindex_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // hash_
    //
    {
      ::bytes_t& v =
        o.hash_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.hash_value,
        i.hash_size,
        i.hash_null);
    }

    // version_
    //
    {
      ::uint32_t& v =
        o.version_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.version_value,
        i.version_null);
    }

    // locktime_
    //
    {
      ::uint32_t& v =
        o.locktime_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.locktime_value,
        i.locktime_null);
    }

    // timestamp_
    //
    {
      ::uint32_t& v =
        o.timestamp_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.timestamp_value,
        i.timestamp_null);
    }

    // status_
    //
    {
      ::CoinQ::Vault::Tx::status_t& v =
        o.status_;

      sqlite::value_traits<
          ::CoinQ::Vault::Tx::status_t,
          sqlite::id_integer >::set_value (
        v,
        i.status_value,
        i.status_null);
    }

    // have_fee_
    //
    {
      bool& v =
        o.have_fee_;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.have_fee_value,
        i.have_fee_null);
    }

    // fee_
    //
    {
      ::uint64_t& v =
        o.fee_;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.fee_value,
        i.fee_null);
    }

    // blockheader_
    //
    {
      ::std::shared_ptr< ::CoinQ::Vault::BlockHeader >& v =
        o.blockheader_;

      typedef object_traits< ::CoinQ::Vault::BlockHeader > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > > ptr_traits;

      if (i.blockheader_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.blockheader_value,
          i.blockheader_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // blockindex_
    //
    {
      ::odb::nullable< unsigned int >& v =
        o.blockindex_;

      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.blockindex_value,
        i.blockindex_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::container_statement_cache_type
  {
    sqlite::container_statements_impl< txins_traits > txins_;
    sqlite::container_statements_impl< txouts_traits > txouts_;

    container_statement_cache_type (
      sqlite::connection& c,
      sqlite::binding& id)
    : txins_ (c, id),
      txouts_ (c, id)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Tx\" ("
  "\"id\","
  "\"hash\","
  "\"version\","
  "\"locktime\","
  "\"timestamp\","
  "\"status\","
  "\"have_fee\","
  "\"fee\","
  "\"blockheader\","
  "\"blockindex\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Tx\".\"id\","
  "\"Tx\".\"hash\","
  "\"Tx\".\"version\","
  "\"Tx\".\"locktime\","
  "\"Tx\".\"timestamp\","
  "\"Tx\".\"status\","
  "\"Tx\".\"have_fee\","
  "\"Tx\".\"fee\","
  "\"Tx\".\"blockheader\","
  "\"Tx\".\"blockindex\""
  " FROM \"Tx\""
  " WHERE \"Tx\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::update_statement[] =
  "UPDATE \"Tx\" SET "
  "\"hash\"=?,"
  "\"version\"=?,"
  "\"locktime\"=?,"
  "\"timestamp\"=?,"
  "\"status\"=?,"
  "\"have_fee\"=?,"
  "\"fee\"=?,"
  "\"blockheader\"=?,"
  "\"blockindex\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Tx\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Tx\".\"id\","
  "\"Tx\".\"hash\","
  "\"Tx\".\"version\","
  "\"Tx\".\"locktime\","
  "\"Tx\".\"timestamp\","
  "\"Tx\".\"status\","
  "\"Tx\".\"have_fee\","
  "\"Tx\".\"fee\","
  "\"Tx\".\"blockheader\","
  "\"Tx\".\"blockindex\""
  " FROM \"Tx\""
  " LEFT JOIN \"BlockHeader\" AS \"blockheader\" ON \"blockheader\".\"id\"=\"Tx\".\"blockheader\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Tx\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::table_name[] =
  "\"Tx\"";

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // txins_
    //
    {
      ::CoinQ::Vault::Tx::txins_t const& v =
        obj.txins_;

      txins_traits::persist (
        v,
        sts.container_statment_cache ().txins_);
    }

    // txouts_
    //
    {
      ::CoinQ::Vault::Tx::txouts_t const& v =
        obj.txouts_;

      txouts_traits::persist (
        v,
        sts.container_statment_cache ().txouts_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    // txins_
    //
    {
      ::CoinQ::Vault::Tx::txins_t const& v =
        obj.txins_;

      txins_traits::update (
        v,
        sts.container_statment_cache ().txins_);
    }

    // txouts_
    //
    {
      ::CoinQ::Vault::Tx::txouts_t const& v =
        obj.txouts_;

      txouts_traits::update (
        v,
        sts.container_statment_cache ().txouts_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // txins_
    //
    txins_traits::erase (
      sts.container_statment_cache ().txins_);

    // txouts_
    //
    txouts_traits::erase (
      sts.container_statment_cache ().txouts_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  load_ (statements_type& sts, object_type& obj)
  {
    // txins_
    //
    {
      ::CoinQ::Vault::Tx::txins_t& v =
        obj.txins_;

      txins_traits::load (
        v,
        sts.container_statment_cache ().txins_);
    }

    // txouts_
    //
    {
      ::CoinQ::Vault::Tx::txouts_t& v =
        obj.txouts_;

      txouts_traits::load (
        v,
        sts.container_statment_cache ().txouts_);
    }
  }

  result< access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Tx_txouts\"");
          db.execute ("DROP TABLE IF EXISTS \"Tx_txins\"");
          db.execute ("DROP TABLE IF EXISTS \"Tx\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Tx\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hash\" BLOB NOT NULL,\n"
                      "  \"version\" INTEGER NOT NULL,\n"
                      "  \"locktime\" INTEGER NOT NULL,\n"
                      "  \"timestamp\" INTEGER NOT NULL,\n"
                      "  \"status\" INTEGER NOT NULL,\n"
                      "  \"have_fee\" INTEGER NOT NULL,\n"
                      "  \"fee\" INTEGER NOT NULL,\n"
                      "  \"blockheader\" INTEGER,\n"
                      "  \"blockindex\" INTEGER,\n"
                      "  CONSTRAINT \"blockheader_fk\"\n"
                      "    FOREIGN KEY (\"blockheader\")\n"
                      "    REFERENCES \"BlockHeader\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE UNIQUE INDEX \"Tx_hash_i\"\n"
                      "  ON \"Tx\" (\"hash\")");
          db.execute ("CREATE TABLE \"Tx_txins\" (\n"
                      "  \"object_id\" INTEGER NOT NULL,\n"
                      "  \"index\" INTEGER NOT NULL,\n"
                      "  \"value\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"Tx\" (\"id\")\n"
                      "    ON DELETE CASCADE,\n"
                      "  CONSTRAINT \"value_fk\"\n"
                      "    FOREIGN KEY (\"value\")\n"
                      "    REFERENCES \"TxIn\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE INDEX \"Tx_txins_object_id_i\"\n"
                      "  ON \"Tx_txins\" (\"object_id\")");
          db.execute ("CREATE INDEX \"Tx_txins_index_i\"\n"
                      "  ON \"Tx_txins\" (\"index\")");
          db.execute ("CREATE TABLE \"Tx_txouts\" (\n"
                      "  \"object_id\" INTEGER NOT NULL,\n"
                      "  \"index\" INTEGER NOT NULL,\n"
                      "  \"value\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"Tx\" (\"id\")\n"
                      "    ON DELETE CASCADE,\n"
                      "  CONSTRAINT \"value_fk\"\n"
                      "    FOREIGN KEY (\"value\")\n"
                      "    REFERENCES \"TxOut\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE INDEX \"Tx_txouts_object_id_i\"\n"
                      "  ON \"Tx_txouts\" (\"object_id\")");
          db.execute ("CREATE INDEX \"Tx_txouts_index_i\"\n"
                      "  ON \"Tx_txouts\" (\"index\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_Tx_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::create_schema);

  // ScriptTag
  //

  access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // txoutscript_
    //
    if (t[1UL])
    {
      i.txoutscript_value.capacity (i.txoutscript_size);
      grew = true;
    }

    // description_
    //
    if (t[2UL])
    {
      i.description_value.capacity (i.description_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // txoutscript_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txoutscript_value.data ();
    b[n].size = &i.txoutscript_size;
    b[n].capacity = i.txoutscript_value.capacity ();
    b[n].is_null = &i.txoutscript_null;
    n++;

    // description_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.description_value.data ();
    b[n].size = &i.description_size;
    b[n].capacity = i.description_value.capacity ();
    b[n].is_null = &i.description_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // txoutscript_
    //
    {
      ::bytes_t const& v =
        o.txoutscript_;

      bool is_null (false);
      std::size_t cap (i.txoutscript_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.txoutscript_value,
        i.txoutscript_size,
        is_null,
        v);
      i.txoutscript_null = is_null;
      grew = grew || (cap != i.txoutscript_value.capacity ());
    }

    // description_
    //
    {
      ::std::string const& v =
        o.description_;

      bool is_null (false);
      std::size_t cap (i.description_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.description_value,
        i.description_size,
        is_null,
        v);
      i.description_null = is_null;
      grew = grew || (cap != i.description_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // txoutscript_
    //
    {
      ::bytes_t& v =
        o.txoutscript_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txoutscript_value,
        i.txoutscript_size,
        i.txoutscript_null);
    }

    // description_
    //
    {
      ::std::string& v =
        o.description_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.description_value,
        i.description_size,
        i.description_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::persist_statement[] =
  "INSERT INTO \"ScriptTag\" ("
  "\"id\","
  "\"txoutscript\","
  "\"description\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::find_statement[] =
  "SELECT "
  "\"ScriptTag\".\"id\","
  "\"ScriptTag\".\"txoutscript\","
  "\"ScriptTag\".\"description\""
  " FROM \"ScriptTag\""
  " WHERE \"ScriptTag\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::update_statement[] =
  "UPDATE \"ScriptTag\" SET "
  "\"txoutscript\"=?,"
  "\"description\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::erase_statement[] =
  "DELETE FROM \"ScriptTag\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::query_statement[] =
  "SELECT "
  "\"ScriptTag\".\"id\","
  "\"ScriptTag\".\"txoutscript\","
  "\"ScriptTag\".\"description\""
  " FROM \"ScriptTag\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"ScriptTag\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::table_name[] =
  "\"ScriptTag\"";

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"ScriptTag\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"ScriptTag\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"txoutscript\" BLOB NOT NULL,\n"
                      "  \"description\" TEXT NOT NULL)");
          db.execute ("CREATE UNIQUE INDEX \"ScriptTag_txoutscript_i\"\n"
                      "  ON \"ScriptTag\" (\"txoutscript\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_ScriptTag_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::create_schema);

  // Key
  //

  access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // pubkey_
    //
    if (t[1UL])
    {
      i.pubkey_value.capacity (i.pubkey_size);
      grew = true;
    }

    // privkey_
    //
    if (t[2UL])
    {
      i.privkey_value.capacity (i.privkey_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // pubkey_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.pubkey_value.data ();
    b[n].size = &i.pubkey_size;
    b[n].capacity = i.pubkey_value.capacity ();
    b[n].is_null = &i.pubkey_null;
    n++;

    // privkey_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.privkey_value.data ();
    b[n].size = &i.privkey_size;
    b[n].capacity = i.privkey_value.capacity ();
    b[n].is_null = &i.privkey_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // pubkey_
    //
    {
      ::bytes_t const& v =
        o.pubkey_;

      bool is_null (false);
      std::size_t cap (i.pubkey_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.pubkey_value,
        i.pubkey_size,
        is_null,
        v);
      i.pubkey_null = is_null;
      grew = grew || (cap != i.pubkey_value.capacity ());
    }

    // privkey_
    //
    {
      ::odb::nullable< ::std::vector< unsigned char > > const& v =
        o.privkey_;

      bool is_null (true);
      std::size_t cap (i.privkey_value.capacity ());
      sqlite::value_traits<
          ::odb::nullable< ::std::vector< unsigned char > >,
          sqlite::id_blob >::set_image (
        i.privkey_value,
        i.privkey_size,
        is_null,
        v);
      i.privkey_null = is_null;
      grew = grew || (cap != i.privkey_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // pubkey_
    //
    {
      ::bytes_t& v =
        o.pubkey_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.pubkey_value,
        i.pubkey_size,
        i.pubkey_null);
    }

    // privkey_
    //
    {
      ::odb::nullable< ::std::vector< unsigned char > >& v =
        o.privkey_;

      sqlite::value_traits<
          ::odb::nullable< ::std::vector< unsigned char > >,
          sqlite::id_blob >::set_value (
        v,
        i.privkey_value,
        i.privkey_size,
        i.privkey_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Key\" ("
  "\"id\","
  "\"pubkey\","
  "\"privkey\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Key\".\"id\","
  "\"Key\".\"pubkey\","
  "\"Key\".\"privkey\""
  " FROM \"Key\""
  " WHERE \"Key\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::update_statement[] =
  "UPDATE \"Key\" SET "
  "\"pubkey\"=?,"
  "\"privkey\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Key\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Key\".\"id\","
  "\"Key\".\"pubkey\","
  "\"Key\".\"privkey\""
  " FROM \"Key\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Key\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::table_name[] =
  "\"Key\"";

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Key\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Key\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"pubkey\" BLOB NOT NULL,\n"
                      "  \"privkey\" BLOB)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_Key_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::create_schema);

  // Keychain
  //

  // keys_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  select_statement[] =
  "SELECT "
  "\"Keychain_keys\".\"index\","
  "\"Keychain_keys\".\"value\""
  " FROM \"Keychain_keys\""
  " WHERE \"Keychain_keys\".\"object_id\"=?"
  " ORDER BY \"Keychain_keys\".\"index\"";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  insert_statement[] =
  "INSERT INTO \"Keychain_keys\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  delete_statement[] =
  "DELETE FROM \"Keychain_keys\""
  " WHERE \"object_id\"=?";

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    t[1UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  init (data_image_type& i, index_type* j, const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::Key > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.value_value,
          is_null,
          id);
        i.value_null = is_null;
      }
      else
        throw null_pointer ();
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  init (index_type& j, value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::Key > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  persist (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  update (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::keys_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // name_
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // type_
    //
    t[2UL] = false;

    // extkey_
    //
    if (t[3UL])
    {
      i.extkey_value.capacity (i.extkey_size);
      grew = true;
    }

    // hash_
    //
    if (t[4UL])
    {
      i.hash_value.capacity (i.hash_size);
      grew = true;
    }

    // numkeys_
    //
    t[5UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // name_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.name_value.data ();
    b[n].size = &i.name_size;
    b[n].capacity = i.name_value.capacity ();
    b[n].is_null = &i.name_null;
    n++;

    // type_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // extkey_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.extkey_value.data ();
    b[n].size = &i.extkey_size;
    b[n].capacity = i.extkey_value.capacity ();
    b[n].is_null = &i.extkey_null;
    n++;

    // hash_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.hash_value.data ();
    b[n].size = &i.hash_size;
    b[n].capacity = i.hash_value.capacity ();
    b[n].is_null = &i.hash_null;
    n++;

    // numkeys_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.numkeys_value;
    b[n].is_null = &i.numkeys_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t cap (i.name_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.name_value,
        i.name_size,
        is_null,
        v);
      i.name_null = is_null;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // type_
    //
    {
      ::CoinQ::Vault::Keychain::type_t const& v =
        o.type_;

      bool is_null (false);
      sqlite::value_traits<
          ::CoinQ::Vault::Keychain::type_t,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // extkey_
    //
    {
      ::bytes_t const& v =
        o.extkey_;

      bool is_null (false);
      std::size_t cap (i.extkey_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.extkey_value,
        i.extkey_size,
        is_null,
        v);
      i.extkey_null = is_null;
      grew = grew || (cap != i.extkey_value.capacity ());
    }

    // hash_
    //
    {
      ::bytes_t const& v =
        o.hash_;

      bool is_null (false);
      std::size_t cap (i.hash_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.hash_value,
        i.hash_size,
        is_null,
        v);
      i.hash_null = is_null;
      grew = grew || (cap != i.hash_value.capacity ());
    }

    // numkeys_
    //
    {
      long unsigned int const& v =
        o.numkeys_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.numkeys_value,
        is_null,
        v);
      i.numkeys_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // type_
    //
    {
      ::CoinQ::Vault::Keychain::type_t& v =
        o.type_;

      sqlite::value_traits<
          ::CoinQ::Vault::Keychain::type_t,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // extkey_
    //
    {
      ::bytes_t& v =
        o.extkey_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.extkey_value,
        i.extkey_size,
        i.extkey_null);
    }

    // hash_
    //
    {
      ::bytes_t& v =
        o.hash_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.hash_value,
        i.hash_size,
        i.hash_null);
    }

    // numkeys_
    //
    {
      long unsigned int& v =
        o.numkeys_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.numkeys_value,
        i.numkeys_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::container_statement_cache_type
  {
    sqlite::container_statements_impl< keys_traits > keys_;

    container_statement_cache_type (
      sqlite::connection& c,
      sqlite::binding& id)
    : keys_ (c, id)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Keychain\" ("
  "\"id\","
  "\"name\","
  "\"type\","
  "\"extkey\","
  "\"hash\","
  "\"numkeys\")"
  " VALUES (?,?,?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Keychain\".\"id\","
  "\"Keychain\".\"name\","
  "\"Keychain\".\"type\","
  "\"Keychain\".\"extkey\","
  "\"Keychain\".\"hash\","
  "\"Keychain\".\"numkeys\""
  " FROM \"Keychain\""
  " WHERE \"Keychain\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::update_statement[] =
  "UPDATE \"Keychain\" SET "
  "\"name\"=?,"
  "\"type\"=?,"
  "\"extkey\"=?,"
  "\"hash\"=?,"
  "\"numkeys\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Keychain\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Keychain\".\"id\","
  "\"Keychain\".\"name\","
  "\"Keychain\".\"type\","
  "\"Keychain\".\"extkey\","
  "\"Keychain\".\"hash\","
  "\"Keychain\".\"numkeys\""
  " FROM \"Keychain\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Keychain\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::table_name[] =
  "\"Keychain\"";

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // keys_
    //
    {
      ::CoinQ::Vault::Keychain::keys_t const& v =
        obj.keys_;

      keys_traits::persist (
        v,
        sts.container_statment_cache ().keys_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    // keys_
    //
    {
      ::CoinQ::Vault::Keychain::keys_t const& v =
        obj.keys_;

      keys_traits::update (
        v,
        sts.container_statment_cache ().keys_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // keys_
    //
    keys_traits::erase (
      sts.container_statment_cache ().keys_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  load_ (statements_type& sts, object_type& obj)
  {
    // keys_
    //
    {
      ::CoinQ::Vault::Keychain::keys_t& v =
        obj.keys_;

      keys_traits::load (
        v,
        sts.container_statment_cache ().keys_);
    }
  }

  result< access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Keychain_keys\"");
          db.execute ("DROP TABLE IF EXISTS \"Keychain\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Keychain\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"extkey\" BLOB NOT NULL,\n"
                      "  \"hash\" BLOB NOT NULL,\n"
                      "  \"numkeys\" INTEGER NOT NULL)");
          db.execute ("CREATE UNIQUE INDEX \"Keychain_name_i\"\n"
                      "  ON \"Keychain\" (\"name\")");
          db.execute ("CREATE TABLE \"Keychain_keys\" (\n"
                      "  \"object_id\" INTEGER NOT NULL,\n"
                      "  \"index\" INTEGER NOT NULL,\n"
                      "  \"value\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id\")\n"
                      "    REFERENCES \"Keychain\" (\"id\")\n"
                      "    ON DELETE CASCADE,\n"
                      "  CONSTRAINT \"value_fk\"\n"
                      "    FOREIGN KEY (\"value\")\n"
                      "    REFERENCES \"Key\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE INDEX \"Keychain_keys_object_id_i\"\n"
                      "  ON \"Keychain_keys\" (\"object_id\")");
          db.execute ("CREATE INDEX \"Keychain_keys_index_i\"\n"
                      "  ON \"Keychain_keys\" (\"index\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_Keychain_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::create_schema);

  // SigningScript
  //

  const char alias_traits<  ::CoinQ::Vault::Account,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::account_tag>::
  table_name[] = "\"account\"";

  const query_columns_base< ::CoinQ::Vault::SigningScript, id_sqlite >::account_type_
  query_columns_base< ::CoinQ::Vault::SigningScript, id_sqlite >::account;

  // txouts_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  select_statement[] =
  "SELECT "
  "\"TxOut\".\"id\""
  " FROM \"TxOut\""
  " WHERE \"TxOut\".\"signingscript\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  init (value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::TxOut > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::txouts_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // label_
    //
    if (t[1UL])
    {
      i.label_value.capacity (i.label_size);
      grew = true;
    }

    // status_
    //
    t[2UL] = false;

    // txinscript_
    //
    if (t[3UL])
    {
      i.txinscript_value.capacity (i.txinscript_size);
      grew = true;
    }

    // txoutscript_
    //
    if (t[4UL])
    {
      i.txoutscript_value.capacity (i.txoutscript_size);
      grew = true;
    }

    // account_
    //
    t[5UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // label_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.label_value.data ();
    b[n].size = &i.label_size;
    b[n].capacity = i.label_value.capacity ();
    b[n].is_null = &i.label_null;
    n++;

    // status_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.status_value;
    b[n].is_null = &i.status_null;
    n++;

    // txinscript_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txinscript_value.data ();
    b[n].size = &i.txinscript_size;
    b[n].capacity = i.txinscript_value.capacity ();
    b[n].is_null = &i.txinscript_null;
    n++;

    // txoutscript_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txoutscript_value.data ();
    b[n].size = &i.txoutscript_size;
    b[n].capacity = i.txoutscript_value.capacity ();
    b[n].is_null = &i.txoutscript_null;
    n++;

    // account_
    //
    if (sk == statement_select)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.account_value;
      b[n].is_null = &i.account_null;
      n++;
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // label_
    //
    {
      ::std::string const& v =
        o.label_;

      bool is_null (false);
      std::size_t cap (i.label_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.label_value,
        i.label_size,
        is_null,
        v);
      i.label_null = is_null;
      grew = grew || (cap != i.label_value.capacity ());
    }

    // status_
    //
    {
      ::CoinQ::Vault::SigningScript::status_t const& v =
        o.status_;

      bool is_null (false);
      sqlite::value_traits<
          ::CoinQ::Vault::SigningScript::status_t,
          sqlite::id_integer >::set_image (
        i.status_value,
        is_null,
        v);
      i.status_null = is_null;
    }

    // txinscript_
    //
    {
      ::bytes_t const& v =
        o.txinscript_;

      bool is_null (false);
      std::size_t cap (i.txinscript_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.txinscript_value,
        i.txinscript_size,
        is_null,
        v);
      i.txinscript_null = is_null;
      grew = grew || (cap != i.txinscript_value.capacity ());
    }

    // txoutscript_
    //
    {
      ::bytes_t const& v =
        o.txoutscript_;

      bool is_null (false);
      std::size_t cap (i.txoutscript_value.capacity ());
      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_image (
        i.txoutscript_value,
        i.txoutscript_size,
        is_null,
        v);
      i.txoutscript_null = is_null;
      grew = grew || (cap != i.txoutscript_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // label_
    //
    {
      ::std::string& v =
        o.label_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.label_value,
        i.label_size,
        i.label_null);
    }

    // status_
    //
    {
      ::CoinQ::Vault::SigningScript::status_t& v =
        o.status_;

      sqlite::value_traits<
          ::CoinQ::Vault::SigningScript::status_t,
          sqlite::id_integer >::set_value (
        v,
        i.status_value,
        i.status_null);
    }

    // txinscript_
    //
    {
      ::bytes_t& v =
        o.txinscript_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txinscript_value,
        i.txinscript_size,
        i.txinscript_null);
    }

    // txoutscript_
    //
    {
      ::bytes_t& v =
        o.txoutscript_;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txoutscript_value,
        i.txoutscript_size,
        i.txoutscript_null);
    }

    // account_
    //
    {
      ::std::weak_ptr< ::CoinQ::Vault::Account >& v =
        o.account_;

      typedef object_traits< ::CoinQ::Vault::Account > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::CoinQ::Vault::Account > > ptr_traits;

      if (i.account_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.account_value,
          i.account_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));

        if (odb::pointer_traits<ptr_traits::strong_pointer_type>::null_ptr (
              ptr_traits::lock (v)))
          throw session_required ();
      }
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::container_statement_cache_type
  {
    sqlite::container_statements_impl< txouts_traits > txouts_;

    container_statement_cache_type (
      sqlite::connection& c,
      sqlite::binding& id)
    : txouts_ (c, id)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::persist_statement[] =
  "INSERT INTO \"SigningScript\" ("
  "\"id\","
  "\"label\","
  "\"status\","
  "\"txinscript\","
  "\"txoutscript\")"
  " VALUES (?,?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::find_statement[] =
  "SELECT "
  "\"SigningScript\".\"id\","
  "\"SigningScript\".\"label\","
  "\"SigningScript\".\"status\","
  "\"SigningScript\".\"txinscript\","
  "\"SigningScript\".\"txoutscript\","
  "\"Account_signingscripts\".\"account_id\""
  " FROM \"SigningScript\""
  " LEFT JOIN \"Account_signingscripts\" ON \"Account_signingscripts\".\"signingscript_id\"=\"SigningScript\".\"id\""
  " WHERE \"SigningScript\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::update_statement[] =
  "UPDATE \"SigningScript\" SET "
  "\"label\"=?,"
  "\"status\"=?,"
  "\"txinscript\"=?,"
  "\"txoutscript\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::erase_statement[] =
  "DELETE FROM \"SigningScript\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::query_statement[] =
  "SELECT "
  "\"SigningScript\".\"id\","
  "\"SigningScript\".\"label\","
  "\"SigningScript\".\"status\","
  "\"SigningScript\".\"txinscript\","
  "\"SigningScript\".\"txoutscript\","
  "\"Account_signingscripts\".\"account_id\""
  " FROM \"SigningScript\""
  " LEFT JOIN \"Account_signingscripts\" ON \"Account_signingscripts\".\"signingscript_id\"=\"SigningScript\".\"id\""
  " LEFT JOIN \"Account\" AS \"account\" ON \"account\".\"id\"=\"Account_signingscripts\".\"account_id\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"SigningScript\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::table_name[] =
  "\"SigningScript\"";

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  load_ (statements_type& sts, object_type& obj)
  {
    // txouts_
    //
    {
      ::CoinQ::Vault::Tx::txouts_t& v =
        obj.txouts_;

      txouts_traits::load (
        v,
        sts.container_statment_cache ().txouts_);
    }
  }

  result< access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"SigningScript\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"SigningScript\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"label\" TEXT NOT NULL,\n"
                      "  \"status\" INTEGER NOT NULL,\n"
                      "  \"txinscript\" BLOB NOT NULL,\n"
                      "  \"txoutscript\" BLOB NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_SigningScript_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::create_schema);

  // Account
  //

  // keychain_hashes_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  select_statement[] =
  "SELECT "
  "\"Account_keychain_hashes\".\"keychain_hash\""
  " FROM \"Account_keychain_hashes\""
  " WHERE \"Account_keychain_hashes\".\"account_id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  insert_statement[] =
  "INSERT INTO \"Account_keychain_hashes\" ("
  "\"account_id\","
  "\"keychain_hash\")"
  " VALUES (?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  delete_statement[] =
  "DELETE FROM \"Account_keychain_hashes\""
  " WHERE \"account_id\"=?";

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = d.value_value.data ();
    b[n].size = &d.value_size;
    b[n].capacity = d.value_value.capacity ();
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // value
    //
    if (t[0UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  init (data_image_type& i, const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // value
    //
    {
      bool is_null (false);
      std::size_t cap (i.value_value.capacity ());
      sqlite::value_traits<
          value_type,
          sqlite::id_blob >::set_image (
        i.value_value,
        i.value_size,
        is_null,
        v);
      i.value_null = is_null;
      grew = grew || (cap != i.value_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  init (value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      sqlite::value_traits<
          value_type,
          sqlite::id_blob >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  insert (const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  select (value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  persist (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  update (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    functions_type& fs (sts.functions ());
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::keychain_hashes_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    container_traits_type::erase (fs);
  }

  // signingscripts_
  //

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  select_statement[] =
  "SELECT "
  "\"Account_signingscripts\".\"index\","
  "\"Account_signingscripts\".\"signingscript_id\""
  " FROM \"Account_signingscripts\""
  " WHERE \"Account_signingscripts\".\"account_id\"=?"
  " ORDER BY \"Account_signingscripts\".\"index\"";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  insert_statement[] =
  "INSERT INTO \"Account_signingscripts\" ("
  "\"account_id\","
  "\"index\","
  "\"signingscript_id\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  delete_statement[] =
  "DELETE FROM \"Account_signingscripts\""
  " WHERE \"account_id\"=?";

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  grow (data_image_type& i, bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    t[1UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  init (data_image_type& i, index_type* j, const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::SigningScript > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.value_value,
          is_null,
          id);
        i.value_null = is_null;
      }
      else
        throw null_pointer ();
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  init (index_type& j, value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::CoinQ::Vault::SigningScript > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  persist (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  load (container_type& c, statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  update (const container_type& c, statements_type& sts)
  {
    using namespace sqlite;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::signingscripts_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::id_type
  access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // name_
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // minsigs_
    //
    t[2UL] = false;

    // time_created_
    //
    t[3UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // name_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.name_value.data ();
    b[n].size = &i.name_size;
    b[n].capacity = i.name_value.capacity ();
    b[n].is_null = &i.name_null;
    n++;

    // minsigs_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.minsigs_value;
    b[n].is_null = &i.minsigs_null;
    n++;

    // time_created_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.time_created_value;
    b[n].is_null = &i.time_created_null;
    n++;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t cap (i.name_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.name_value,
        i.name_size,
        is_null,
        v);
      i.name_null = is_null;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // minsigs_
    //
    {
      unsigned int const& v =
        o.minsigs_;

      bool is_null (false);
      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_image (
        i.minsigs_value,
        is_null,
        v);
      i.minsigs_null = is_null;
    }

    // time_created_
    //
    {
      ::uint32_t const& v =
        o.time_created_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.time_created_value,
        is_null,
        v);
      i.time_created_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // minsigs_
    //
    {
      unsigned int& v =
        o.minsigs_;

      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.minsigs_value,
        i.minsigs_null);
    }

    // time_created_
    //
    {
      ::uint32_t& v =
        o.time_created_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.time_created_value,
        i.time_created_null);
    }
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::container_statement_cache_type
  {
    sqlite::container_statements_impl< keychain_hashes_traits > keychain_hashes_;
    sqlite::container_statements_impl< signingscripts_traits > signingscripts_;

    container_statement_cache_type (
      sqlite::connection& c,
      sqlite::binding& id)
    : keychain_hashes_ (c, id),
      signingscripts_ (c, id)
    {
    }
  };

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Account\" ("
  "\"id\","
  "\"name\","
  "\"minsigs\","
  "\"time_created\")"
  " VALUES (?,?,?,?)";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Account\".\"id\","
  "\"Account\".\"name\","
  "\"Account\".\"minsigs\","
  "\"Account\".\"time_created\""
  " FROM \"Account\""
  " WHERE \"Account\".\"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::update_statement[] =
  "UPDATE \"Account\" SET "
  "\"name\"=?,"
  "\"minsigs\"=?,"
  "\"time_created\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Account\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Account\".\"id\","
  "\"Account\".\"name\","
  "\"Account\".\"minsigs\","
  "\"Account\".\"time_created\""
  " FROM \"Account\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Account\""
  " ";

  const char access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::table_name[] =
  "\"Account\"";

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // keychain_hashes_
    //
    {
      ::std::set< ::std::vector< unsigned char > > const& v =
        obj.keychain_hashes_;

      keychain_hashes_traits::persist (
        v,
        sts.container_statment_cache ().keychain_hashes_);
    }

    // signingscripts_
    //
    {
      ::CoinQ::Vault::Account::signingscripts_t const& v =
        obj.signingscripts_;

      signingscripts_traits::persist (
        v,
        sts.container_statment_cache ().signingscripts_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    // keychain_hashes_
    //
    {
      ::std::set< ::std::vector< unsigned char > > const& v =
        obj.keychain_hashes_;

      keychain_hashes_traits::update (
        v,
        sts.container_statment_cache ().keychain_hashes_);
    }

    // signingscripts_
    //
    {
      ::CoinQ::Vault::Account::signingscripts_t const& v =
        obj.signingscripts_;

      signingscripts_traits::update (
        v,
        sts.container_statment_cache ().signingscripts_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // keychain_hashes_
    //
    keychain_hashes_traits::erase (
      sts.container_statment_cache ().keychain_hashes_);

    // signingscripts_
    //
    signingscripts_traits::erase (
      sts.container_statment_cache ().signingscripts_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::pointer_type
  access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  load_ (statements_type& sts, object_type& obj)
  {
    // keychain_hashes_
    //
    {
      ::std::set< ::std::vector< unsigned char > >& v =
        obj.keychain_hashes_;

      keychain_hashes_traits::load (
        v,
        sts.container_statment_cache ().keychain_hashes_);
    }

    // signingscripts_
    //
    {
      ::CoinQ::Vault::Account::signingscripts_t& v =
        obj.signingscripts_;

      signingscripts_traits::load (
        v,
        sts.container_statment_cache ().signingscripts_);
    }
  }

  result< access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::object_type >
  access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Account_signingscripts\"");
          db.execute ("DROP TABLE IF EXISTS \"Account_keychain_hashes\"");
          db.execute ("DROP TABLE IF EXISTS \"Account\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Account\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"minsigs\" INTEGER NOT NULL,\n"
                      "  \"time_created\" INTEGER NOT NULL)");
          db.execute ("CREATE UNIQUE INDEX \"Account_name_i\"\n"
                      "  ON \"Account\" (\"name\")");
          db.execute ("CREATE TABLE \"Account_keychain_hashes\" (\n"
                      "  \"account_id\" INTEGER NOT NULL,\n"
                      "  \"keychain_hash\" BLOB NOT NULL,\n"
                      "  CONSTRAINT \"account_id_fk\"\n"
                      "    FOREIGN KEY (\"account_id\")\n"
                      "    REFERENCES \"Account\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"Account_keychain_hashes_account_id_i\"\n"
                      "  ON \"Account_keychain_hashes\" (\"account_id\")");
          db.execute ("CREATE TABLE \"Account_signingscripts\" (\n"
                      "  \"account_id\" INTEGER NOT NULL,\n"
                      "  \"index\" INTEGER NOT NULL,\n"
                      "  \"signingscript_id\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"account_id_fk\"\n"
                      "    FOREIGN KEY (\"account_id\")\n"
                      "    REFERENCES \"Account\" (\"id\")\n"
                      "    ON DELETE CASCADE,\n"
                      "  CONSTRAINT \"signingscript_id_fk\"\n"
                      "    FOREIGN KEY (\"signingscript_id\")\n"
                      "    REFERENCES \"SigningScript\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE INDEX \"Account_signingscripts_account_id_i\"\n"
                      "  ON \"Account_signingscripts\" (\"account_id\")");
          db.execute ("CREATE INDEX \"Account_signingscripts_index_i\"\n"
                      "  ON \"Account_signingscripts\" (\"index\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_CoinQ_Vault_Account_ (
    id_sqlite,
    "",
    &access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::create_schema);

  // AccountView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = false;

    // name
    //
    if (t[1UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // minsigs
    //
    t[2UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.name_value.data ();
    b[n].size = &i.name_size;
    b[n].capacity = i.name_value.capacity ();
    b[n].is_null = &i.name_null;
    n++;

    // minsigs
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.minsigs_value;
    b[n].is_null = &i.minsigs_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // name
    //
    {
      ::std::string& v =
        o.name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // minsigs
    //
    {
      unsigned int& v =
        o.minsigs;

      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.minsigs_value,
        i.minsigs_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Account\".\"id\","
      "\"Account\".\"name\","
      "\"Account\".\"minsigs\""
    );

    r += "FROM \"Account\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // KeychainView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // account_name
    //
    if (t[0UL])
    {
      i.account_name_value.capacity (i.account_name_size);
      grew = true;
    }

    // keychain_name
    //
    if (t[1UL])
    {
      i.keychain_name_value.capacity (i.keychain_name_size);
      grew = true;
    }

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // account_name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.account_name_value.data ();
    b[n].size = &i.account_name_size;
    b[n].capacity = i.account_name_value.capacity ();
    b[n].is_null = &i.account_name_null;
    n++;

    // keychain_name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.keychain_name_value.data ();
    b[n].size = &i.keychain_name_size;
    b[n].capacity = i.keychain_name_value.capacity ();
    b[n].is_null = &i.keychain_name_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // account_name
    //
    {
      ::std::string& v =
        o.account_name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.account_name_value,
        i.account_name_size,
        i.account_name_null);
    }

    // keychain_name
    //
    {
      ::std::string& v =
        o.keychain_name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.keychain_name_value,
        i.keychain_name_size,
        i.keychain_name_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Account\".\"name\","
      "\"Keychain\".\"name\""
    );

    r += "FROM \"Account\"";

    r += "LEFT JOIN \"Account_keychain_hashes\" AS \"t\" ON";
    // From CoinQ_vault_db.hxx:981:5
    r += "t.account_id = " + query_columns::Account::id;

    r += "LEFT JOIN \"Keychain\" ON";
    // From CoinQ_vault_db.hxx:982:5
    r += "t.keychain_hash = " + query_columns::Keychain::hash;

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // TxParentChildView
  //

  const char alias_traits<  ::CoinQ::Vault::Tx,
    id_sqlite,
    access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::parent_tx_tag>::
  table_name[] = "\"parent_tx\"";

  const char alias_traits<  ::CoinQ::Vault::Tx,
    id_sqlite,
    access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::child_tx_tag>::
  table_name[] = "\"child_tx\"";

  bool access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // parent_id
    //
    t[0UL] = false;

    // parent_hash
    //
    if (t[1UL])
    {
      i.parent_hash_value.capacity (i.parent_hash_size);
      grew = true;
    }

    // child_id
    //
    t[2UL] = false;

    // child_hash
    //
    if (t[3UL])
    {
      i.child_hash_value.capacity (i.child_hash_size);
      grew = true;
    }

    // txout_id
    //
    t[4UL] = false;

    // txin_id
    //
    t[5UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // parent_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.parent_id_value;
    b[n].is_null = &i.parent_id_null;
    n++;

    // parent_hash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.parent_hash_value.data ();
    b[n].size = &i.parent_hash_size;
    b[n].capacity = i.parent_hash_value.capacity ();
    b[n].is_null = &i.parent_hash_null;
    n++;

    // child_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.child_id_value;
    b[n].is_null = &i.child_id_null;
    n++;

    // child_hash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.child_hash_value.data ();
    b[n].size = &i.child_hash_size;
    b[n].capacity = i.child_hash_value.capacity ();
    b[n].is_null = &i.child_hash_null;
    n++;

    // txout_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txout_id_value;
    b[n].is_null = &i.txout_id_null;
    n++;

    // txin_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txin_id_value;
    b[n].is_null = &i.txin_id_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // parent_id
    //
    {
      long unsigned int& v =
        o.parent_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.parent_id_value,
        i.parent_id_null);
    }

    // parent_hash
    //
    {
      ::bytes_t& v =
        o.parent_hash;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.parent_hash_value,
        i.parent_hash_size,
        i.parent_hash_null);
    }

    // child_id
    //
    {
      long unsigned int& v =
        o.child_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.child_id_value,
        i.child_id_null);
    }

    // child_hash
    //
    {
      ::bytes_t& v =
        o.child_hash;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.child_hash_value,
        i.child_hash_size,
        i.child_hash_null);
    }

    // txout_id
    //
    {
      long unsigned int& v =
        o.txout_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.txout_id_value,
        i.txout_id_null);
    }

    // txin_id
    //
    {
      long unsigned int& v =
        o.txin_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.txin_id_value,
        i.txin_id_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"parent_tx\".\"id\","
      "\"parent_tx\".\"hash\","
      "\"child_tx\".\"id\","
      "\"child_tx\".\"hash\","
      "\"TxOut\".\"id\","
      "\"TxIn\".\"id\""
    );

    r += "FROM \"TxOut\"";

    r += "LEFT JOIN \"TxIn\" ON";
    r += "\"TxOut\".\"spent\"=\"TxIn\".\"id\"";

    r += "LEFT JOIN \"Tx_txouts\" ON";
    r += "\"Tx_txouts\".\"value\"=\"TxOut\".\"id\"";
    r += "LEFT JOIN \"Tx\" AS \"parent_tx\" ON";
    r += "\"Tx_txouts\".\"object_id\"=\"parent_tx\".\"id\"";

    r += "LEFT JOIN \"Tx_txins\" ON";
    r += "\"Tx_txins\".\"value\"=\"TxIn\".\"id\"";
    r += "LEFT JOIN \"Tx\" AS \"child_tx\" ON";
    r += "\"Tx_txins\".\"object_id\"=\"child_tx\".\"id\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // TxOutView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // account_id
    //
    t[0UL] = false;

    // account_name
    //
    if (t[1UL])
    {
      i.account_name_value.capacity (i.account_name_size);
      grew = true;
    }

    // signingscript_id
    //
    t[2UL] = false;

    // signingscript_label
    //
    if (t[3UL])
    {
      i.signingscript_label_value.capacity (i.signingscript_label_size);
      grew = true;
    }

    // signingscript_status
    //
    t[4UL] = false;

    // signingscript_txinscript
    //
    if (t[5UL])
    {
      i.signingscript_txinscript_value.capacity (i.signingscript_txinscript_size);
      grew = true;
    }

    // script
    //
    if (t[6UL])
    {
      i.script_value.capacity (i.script_size);
      grew = true;
    }

    // value
    //
    t[7UL] = false;

    // txhash
    //
    if (t[8UL])
    {
      i.txhash_value.capacity (i.txhash_size);
      grew = true;
    }

    // txtimestamp
    //
    t[9UL] = false;

    // txstatus
    //
    t[10UL] = false;

    // txindex
    //
    t[11UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // account_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.account_id_value;
    b[n].is_null = &i.account_id_null;
    n++;

    // account_name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.account_name_value.data ();
    b[n].size = &i.account_name_size;
    b[n].capacity = i.account_name_value.capacity ();
    b[n].is_null = &i.account_name_null;
    n++;

    // signingscript_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.signingscript_id_value;
    b[n].is_null = &i.signingscript_id_null;
    n++;

    // signingscript_label
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.signingscript_label_value.data ();
    b[n].size = &i.signingscript_label_size;
    b[n].capacity = i.signingscript_label_value.capacity ();
    b[n].is_null = &i.signingscript_label_null;
    n++;

    // signingscript_status
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.signingscript_status_value;
    b[n].is_null = &i.signingscript_status_null;
    n++;

    // signingscript_txinscript
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.signingscript_txinscript_value.data ();
    b[n].size = &i.signingscript_txinscript_size;
    b[n].capacity = i.signingscript_txinscript_value.capacity ();
    b[n].is_null = &i.signingscript_txinscript_null;
    n++;

    // script
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.script_value.data ();
    b[n].size = &i.script_size;
    b[n].capacity = i.script_value.capacity ();
    b[n].is_null = &i.script_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.value_value;
    b[n].is_null = &i.value_null;
    n++;

    // txhash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txhash_value.data ();
    b[n].size = &i.txhash_size;
    b[n].capacity = i.txhash_value.capacity ();
    b[n].is_null = &i.txhash_null;
    n++;

    // txtimestamp
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txtimestamp_value;
    b[n].is_null = &i.txtimestamp_null;
    n++;

    // txstatus
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txstatus_value;
    b[n].is_null = &i.txstatus_null;
    n++;

    // txindex
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txindex_value;
    b[n].is_null = &i.txindex_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // account_id
    //
    {
      long unsigned int& v =
        o.account_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.account_id_value,
        i.account_id_null);
    }

    // account_name
    //
    {
      ::std::string& v =
        o.account_name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.account_name_value,
        i.account_name_size,
        i.account_name_null);
    }

    // signingscript_id
    //
    {
      long unsigned int& v =
        o.signingscript_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.signingscript_id_value,
        i.signingscript_id_null);
    }

    // signingscript_label
    //
    {
      ::std::string& v =
        o.signingscript_label;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.signingscript_label_value,
        i.signingscript_label_size,
        i.signingscript_label_null);
    }

    // signingscript_status
    //
    {
      ::CoinQ::Vault::SigningScript::status_t& v =
        o.signingscript_status;

      sqlite::value_traits<
          ::CoinQ::Vault::SigningScript::status_t,
          sqlite::id_integer >::set_value (
        v,
        i.signingscript_status_value,
        i.signingscript_status_null);
    }

    // signingscript_txinscript
    //
    {
      ::bytes_t& v =
        o.signingscript_txinscript;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.signingscript_txinscript_value,
        i.signingscript_txinscript_size,
        i.signingscript_txinscript_null);
    }

    // script
    //
    {
      ::bytes_t& v =
        o.script;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.script_value,
        i.script_size,
        i.script_null);
    }

    // value
    //
    {
      ::uint64_t& v =
        o.value;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.value_value,
        i.value_null);
    }

    // txhash
    //
    {
      ::bytes_t& v =
        o.txhash;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txhash_value,
        i.txhash_size,
        i.txhash_null);
    }

    // txtimestamp
    //
    {
      ::uint32_t& v =
        o.txtimestamp;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txtimestamp_value,
        i.txtimestamp_null);
    }

    // txstatus
    //
    {
      ::CoinQ::Vault::Tx::status_t& v =
        o.txstatus;

      sqlite::value_traits<
          ::CoinQ::Vault::Tx::status_t,
          sqlite::id_integer >::set_value (
        v,
        i.txstatus_value,
        i.txstatus_null);
    }

    // txindex
    //
    {
      ::uint32_t& v =
        o.txindex;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txindex_value,
        i.txindex_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Account\".\"id\","
      "\"Account\".\"name\","
      "\"SigningScript\".\"id\","
      "\"SigningScript\".\"label\","
      "\"SigningScript\".\"status\","
      "\"SigningScript\".\"txinscript\","
      "\"TxOut\".\"script\","
      "\"TxOut\".\"value\","
      "\"Tx\".\"hash\","
      "\"Tx\".\"timestamp\","
      "\"Tx\".\"status\","
      "\"TxOut\".\"txindex\""
    );

    r += "FROM \"TxOut\"";

    r += "LEFT JOIN \"Tx_txouts\" ON";
    r += "\"Tx_txouts\".\"value\"=\"TxOut\".\"id\"";
    r += "LEFT JOIN \"Tx\" ON";
    r += "\"Tx_txouts\".\"object_id\"=\"Tx\".\"id\"";

    r += "LEFT JOIN \"SigningScript\" ON";
    r += "\"TxOut\".\"signingscript\"=\"SigningScript\".\"id\"";

    r += "LEFT JOIN \"Account_signingscripts\" AS \"t\" ON";
    // From CoinQ_vault_db.hxx:1022:5
    r += "t.signingscript_id = " + query_columns::SigningScript::id;

    r += "LEFT JOIN \"Account\" ON";
    // From CoinQ_vault_db.hxx:1023:5
    r += "t.account_id = " + query_columns::Account::id;

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // ConfirmedTxView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // tx_id
    //
    t[0UL] = false;

    // txhash
    //
    if (t[1UL])
    {
      i.txhash_value.capacity (i.txhash_size);
      grew = true;
    }

    // merkleblock_id
    //
    t[2UL] = false;

    // blockheader_id
    //
    t[3UL] = false;

    // blockhash
    //
    if (t[4UL])
    {
      i.blockhash_value.capacity (i.blockhash_size);
      grew = true;
    }

    // blockheight
    //
    t[5UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // tx_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.tx_id_value;
    b[n].is_null = &i.tx_id_null;
    n++;

    // txhash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txhash_value.data ();
    b[n].size = &i.txhash_size;
    b[n].capacity = i.txhash_value.capacity ();
    b[n].is_null = &i.txhash_null;
    n++;

    // merkleblock_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.merkleblock_id_value;
    b[n].is_null = &i.merkleblock_id_null;
    n++;

    // blockheader_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.blockheader_id_value;
    b[n].is_null = &i.blockheader_id_null;
    n++;

    // blockhash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.blockhash_value.data ();
    b[n].size = &i.blockhash_size;
    b[n].capacity = i.blockhash_value.capacity ();
    b[n].is_null = &i.blockhash_null;
    n++;

    // blockheight
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.blockheight_value;
    b[n].is_null = &i.blockheight_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // tx_id
    //
    {
      long unsigned int& v =
        o.tx_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.tx_id_value,
        i.tx_id_null);
    }

    // txhash
    //
    {
      ::bytes_t& v =
        o.txhash;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txhash_value,
        i.txhash_size,
        i.txhash_null);
    }

    // merkleblock_id
    //
    {
      long unsigned int& v =
        o.merkleblock_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.merkleblock_id_value,
        i.merkleblock_id_null);
    }

    // blockheader_id
    //
    {
      long unsigned int& v =
        o.blockheader_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.blockheader_id_value,
        i.blockheader_id_null);
    }

    // blockhash
    //
    {
      ::bytes_t& v =
        o.blockhash;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.blockhash_value,
        i.blockhash_size,
        i.blockhash_null);
    }

    // blockheight
    //
    {
      ::uint32_t& v =
        o.blockheight;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.blockheight_value,
        i.blockheight_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Tx\".\"id\","
      "\"Tx\".\"hash\","
      "\"MerkleBlock\".\"id\","
      "\"BlockHeader\".\"id\","
      "\"BlockHeader\".\"hash\","
      "\"BlockHeader\".\"height\""
    );

    r += "FROM \"Tx\"";

    r += "LEFT JOIN \"MerkleBlock_hashes\" AS \"t\" ON";
    // From CoinQ_vault_db.hxx:1065:5
    r += "t.value = " + query_columns::Tx::hash;

    r += "LEFT JOIN \"MerkleBlock\" ON";
    // From CoinQ_vault_db.hxx:1066:5
    r += "t.object_id = " + query_columns::MerkleBlock::id;

    r += "LEFT JOIN \"BlockHeader\" ON";
    r += "\"MerkleBlock\".\"blockheader\"=\"BlockHeader\".\"id\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // SigningScriptView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // account_id
    //
    t[0UL] = false;

    // account_name
    //
    if (t[1UL])
    {
      i.account_name_value.capacity (i.account_name_size);
      grew = true;
    }

    // id
    //
    t[2UL] = false;

    // label
    //
    if (t[3UL])
    {
      i.label_value.capacity (i.label_size);
      grew = true;
    }

    // status
    //
    t[4UL] = false;

    // txinscript
    //
    if (t[5UL])
    {
      i.txinscript_value.capacity (i.txinscript_size);
      grew = true;
    }

    // txoutscript
    //
    if (t[6UL])
    {
      i.txoutscript_value.capacity (i.txoutscript_size);
      grew = true;
    }

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // account_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.account_id_value;
    b[n].is_null = &i.account_id_null;
    n++;

    // account_name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.account_name_value.data ();
    b[n].size = &i.account_name_size;
    b[n].capacity = i.account_name_value.capacity ();
    b[n].is_null = &i.account_name_null;
    n++;

    // id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // label
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.label_value.data ();
    b[n].size = &i.label_size;
    b[n].capacity = i.label_value.capacity ();
    b[n].is_null = &i.label_null;
    n++;

    // status
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.status_value;
    b[n].is_null = &i.status_null;
    n++;

    // txinscript
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txinscript_value.data ();
    b[n].size = &i.txinscript_size;
    b[n].capacity = i.txinscript_value.capacity ();
    b[n].is_null = &i.txinscript_null;
    n++;

    // txoutscript
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txoutscript_value.data ();
    b[n].size = &i.txoutscript_size;
    b[n].capacity = i.txoutscript_value.capacity ();
    b[n].is_null = &i.txoutscript_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // account_id
    //
    {
      long unsigned int& v =
        o.account_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.account_id_value,
        i.account_id_null);
    }

    // account_name
    //
    {
      ::std::string& v =
        o.account_name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.account_name_value,
        i.account_name_size,
        i.account_name_null);
    }

    // id
    //
    {
      long unsigned int& v =
        o.id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // label
    //
    {
      ::std::string& v =
        o.label;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.label_value,
        i.label_size,
        i.label_null);
    }

    // status
    //
    {
      ::CoinQ::Vault::SigningScript::status_t& v =
        o.status;

      sqlite::value_traits<
          ::CoinQ::Vault::SigningScript::status_t,
          sqlite::id_integer >::set_value (
        v,
        i.status_value,
        i.status_null);
    }

    // txinscript
    //
    {
      ::bytes_t& v =
        o.txinscript;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txinscript_value,
        i.txinscript_size,
        i.txinscript_null);
    }

    // txoutscript
    //
    {
      ::bytes_t& v =
        o.txoutscript;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txoutscript_value,
        i.txoutscript_size,
        i.txoutscript_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Account\".\"id\","
      "\"Account\".\"name\","
      "\"SigningScript\".\"id\","
      "\"SigningScript\".\"label\","
      "\"SigningScript\".\"status\","
      "\"SigningScript\".\"txinscript\","
      "\"SigningScript\".\"txoutscript\""
    );

    r += "FROM \"SigningScript\"";

    r += "LEFT JOIN \"Account_signingscripts\" ON";
    r += "\"Account_signingscripts\".\"signingscript_id\"=\"SigningScript\".\"id\"";
    r += "LEFT JOIN \"Account\" ON";
    r += "\"Account_signingscripts\".\"account_id\"=\"Account\".\"id\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // ScriptCountView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::std::size_t& v =
        o.count;

      sqlite::value_traits<
          ::std::size_t,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(\"SigningScript\".\"id\")"
    );

    r += "FROM \"SigningScript\"";

    r += "LEFT JOIN \"Account_signingscripts\" ON";
    r += "\"Account_signingscripts\".\"signingscript_id\"=\"SigningScript\".\"id\"";
    r += "LEFT JOIN \"Account\" ON";
    r += "\"Account_signingscripts\".\"account_id\"=\"Account\".\"id\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // BalanceView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // balance
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // balance
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.balance_value;
    b[n].is_null = &i.balance_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // balance
    //
    {
      ::uint64_t& v =
        o.balance;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.balance_value,
        i.balance_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "sum(\"TxOut\".\"value\")"
    );

    r += "FROM \"TxOut\"";

    r += "LEFT JOIN \"Tx_txouts\" ON";
    r += "\"Tx_txouts\".\"value\"=\"TxOut\".\"id\"";
    r += "LEFT JOIN \"Tx\" ON";
    r += "\"Tx_txouts\".\"object_id\"=\"Tx\".\"id\"";

    r += "LEFT JOIN \"SigningScript\" ON";
    r += "\"TxOut\".\"signingscript\"=\"SigningScript\".\"id\"";

    r += "LEFT JOIN \"Account_signingscripts\" AS \"t\" ON";
    // From CoinQ_vault_db.hxx:1129:5
    r += "t.signingscript_id = " + query_columns::SigningScript::id;

    r += "LEFT JOIN \"Account\" ON";
    // From CoinQ_vault_db.hxx:1130:5
    r += "t.account_id = " + query_columns::Account::id;

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // BestHeightView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // best_height
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // best_height
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.best_height_value;
    b[n].is_null = &i.best_height_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // best_height
    //
    {
      ::uint32_t& v =
        o.best_height;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.best_height_value,
        i.best_height_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "max(\"BlockHeader\".\"height\")"
    );

    r += "FROM \"BlockHeader\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // FirstAccountTimeCreatedView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // time_created
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // time_created
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.time_created_value;
    b[n].is_null = &i.time_created_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // time_created
    //
    {
      ::uint32_t& v =
        o.time_created;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.time_created_value,
        i.time_created_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "min(\"Account\".\"time_created\")"
    );

    r += "FROM \"Account\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }

  // AccountTxOutView
  //

  bool access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // account_id
    //
    t[0UL] = false;

    // account_name
    //
    if (t[1UL])
    {
      i.account_name_value.capacity (i.account_name_size);
      grew = true;
    }

    // script
    //
    if (t[2UL])
    {
      i.script_value.capacity (i.script_size);
      grew = true;
    }

    // value
    //
    t[3UL] = false;

    // type
    //
    t[4UL] = false;

    // scripttag_id
    //
    t[5UL] = false;

    // description
    //
    if (t[6UL])
    {
      i.description_value.capacity (i.description_size);
      grew = true;
    }

    // txid
    //
    t[7UL] = false;

    // txhash
    //
    if (t[8UL])
    {
      i.txhash_value.capacity (i.txhash_size);
      grew = true;
    }

    // txtimestamp
    //
    t[9UL] = false;

    // txstatus
    //
    t[10UL] = false;

    // have_fee
    //
    t[11UL] = false;

    // fee
    //
    t[12UL] = false;

    // txindex
    //
    t[13UL] = false;

    // height
    //
    t[14UL] = false;

    // block_timestamp
    //
    t[15UL] = false;

    // block_hash
    //
    if (t[16UL])
    {
      i.block_hash_value.capacity (i.block_hash_size);
      grew = true;
    }

    return grew;
  }

  void access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::
  bind (sqlite::bind* b, image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // account_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.account_id_value;
    b[n].is_null = &i.account_id_null;
    n++;

    // account_name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.account_name_value.data ();
    b[n].size = &i.account_name_size;
    b[n].capacity = i.account_name_value.capacity ();
    b[n].is_null = &i.account_name_null;
    n++;

    // script
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.script_value.data ();
    b[n].size = &i.script_size;
    b[n].capacity = i.script_value.capacity ();
    b[n].is_null = &i.script_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.value_value;
    b[n].is_null = &i.value_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // scripttag_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.scripttag_id_value;
    b[n].is_null = &i.scripttag_id_null;
    n++;

    // description
    //
    b[n].type = sqlite::image_traits<
      ::odb::nullable< ::std::basic_string< char > >,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.description_value.data ();
    b[n].size = &i.description_size;
    b[n].capacity = i.description_value.capacity ();
    b[n].is_null = &i.description_null;
    n++;

    // txid
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txid_value;
    b[n].is_null = &i.txid_null;
    n++;

    // txhash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.txhash_value.data ();
    b[n].size = &i.txhash_size;
    b[n].capacity = i.txhash_value.capacity ();
    b[n].is_null = &i.txhash_null;
    n++;

    // txtimestamp
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txtimestamp_value;
    b[n].is_null = &i.txtimestamp_null;
    n++;

    // txstatus
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txstatus_value;
    b[n].is_null = &i.txstatus_null;
    n++;

    // have_fee
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.have_fee_value;
    b[n].is_null = &i.have_fee_null;
    n++;

    // fee
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fee_value;
    b[n].is_null = &i.fee_null;
    n++;

    // txindex
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.txindex_value;
    b[n].is_null = &i.txindex_null;
    n++;

    // height
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.height_value;
    b[n].is_null = &i.height_null;
    n++;

    // block_timestamp
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.block_timestamp_value;
    b[n].is_null = &i.block_timestamp_null;
    n++;

    // block_hash
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.block_hash_value.data ();
    b[n].size = &i.block_hash_size;
    b[n].capacity = i.block_hash_value.capacity ();
    b[n].is_null = &i.block_hash_null;
    n++;
  }

  void access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::
  init (view_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // account_id
    //
    {
      long unsigned int& v =
        o.account_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.account_id_value,
        i.account_id_null);
    }

    // account_name
    //
    {
      ::std::string& v =
        o.account_name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.account_name_value,
        i.account_name_size,
        i.account_name_null);
    }

    // script
    //
    {
      ::bytes_t& v =
        o.script;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.script_value,
        i.script_size,
        i.script_null);
    }

    // value
    //
    {
      ::uint64_t& v =
        o.value;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.value_value,
        i.value_null);
    }

    // type
    //
    {
      ::CoinQ::Vault::TxOut::type_t& v =
        o.type;

      sqlite::value_traits<
          ::CoinQ::Vault::TxOut::type_t,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // scripttag_id
    //
    {
      ::odb::nullable< long unsigned int >& v =
        o.scripttag_id;

      sqlite::value_traits<
          ::odb::nullable< long unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.scripttag_id_value,
        i.scripttag_id_null);
    }

    // description
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.description;

      sqlite::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          sqlite::id_text >::set_value (
        v,
        i.description_value,
        i.description_size,
        i.description_null);
    }

    // txid
    //
    {
      long unsigned int& v =
        o.txid;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.txid_value,
        i.txid_null);
    }

    // txhash
    //
    {
      ::bytes_t& v =
        o.txhash;

      sqlite::value_traits<
          ::bytes_t,
          sqlite::id_blob >::set_value (
        v,
        i.txhash_value,
        i.txhash_size,
        i.txhash_null);
    }

    // txtimestamp
    //
    {
      ::uint32_t& v =
        o.txtimestamp;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txtimestamp_value,
        i.txtimestamp_null);
    }

    // txstatus
    //
    {
      ::CoinQ::Vault::Tx::status_t& v =
        o.txstatus;

      sqlite::value_traits<
          ::CoinQ::Vault::Tx::status_t,
          sqlite::id_integer >::set_value (
        v,
        i.txstatus_value,
        i.txstatus_null);
    }

    // have_fee
    //
    {
      bool& v =
        o.have_fee;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.have_fee_value,
        i.have_fee_null);
    }

    // fee
    //
    {
      ::uint64_t& v =
        o.fee;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.fee_value,
        i.fee_null);
    }

    // txindex
    //
    {
      ::uint32_t& v =
        o.txindex;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.txindex_value,
        i.txindex_null);
    }

    // height
    //
    {
      ::odb::nullable< unsigned int >& v =
        o.height;

      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.height_value,
        i.height_null);
    }

    // block_timestamp
    //
    {
      ::odb::nullable< unsigned int >& v =
        o.block_timestamp;

      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.block_timestamp_value,
        i.block_timestamp_null);
    }

    // block_hash
    //
    {
      ::odb::nullable< ::std::vector< unsigned char > >& v =
        o.block_hash;

      sqlite::value_traits<
          ::odb::nullable< ::std::vector< unsigned char > >,
          sqlite::id_blob >::set_value (
        v,
        i.block_hash_value,
        i.block_hash_size,
        i.block_hash_null);
    }
  }

  access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::query_base_type
  access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Account\".\"id\","
      "\"Account\".\"name\","
      "\"TxOut\".\"script\","
      "\"TxOut\".\"value\","
      "\"TxOut\".\"type\","
      "\"ScriptTag\".\"id\","
      "\"ScriptTag\".\"description\","
      "\"Tx\".\"id\","
      "\"Tx\".\"hash\","
      "\"Tx\".\"timestamp\","
      "\"Tx\".\"status\","
      "\"Tx\".\"have_fee\","
      "\"Tx\".\"fee\","
      "\"TxOut\".\"txindex\","
      "\"BlockHeader\".\"height\","
      "\"BlockHeader\".\"timestamp\","
      "\"BlockHeader\".\"hash\""
    );

    r += "FROM \"TxOut\"";

    r += "LEFT JOIN \"Account\" ON";
    // From CoinQ_vault_db.hxx:1155:5
    r += query_columns::TxOut::account_id == query_columns::Account::id;

    r += "LEFT JOIN \"Tx_txouts\" ON";
    r += "\"Tx_txouts\".\"value\"=\"TxOut\".\"id\"";
    r += "LEFT JOIN \"Tx\" ON";
    r += "\"Tx_txouts\".\"object_id\"=\"Tx\".\"id\"";

    r += "LEFT JOIN \"ScriptTag\" ON";
    // From CoinQ_vault_db.hxx:1157:5
    r += query_columns::TxOut::script == query_columns::ScriptTag::txoutscript;

    r += "LEFT JOIN \"BlockHeader\" ON";
    r += "\"Tx\".\"blockheader\"=\"BlockHeader\".\"id\"";

    r += q.clause_prefix ();
    r += q;

    return r;
  }

  result< access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::view_type >
  access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts));

    return result<view_type> (r);
  }
}

#include <odb/post.hxx>
