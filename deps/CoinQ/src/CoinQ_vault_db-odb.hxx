// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef COIN_Q_VAULT_DB_ODB_HXX
#define COIN_Q_VAULT_DB_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20200UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "CoinQ_vault_db.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // BlockHeader
  //
  template <>
  struct class_traits< ::CoinQ::Vault::BlockHeader >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::BlockHeader >
  {
    public:
    typedef ::CoinQ::Vault::BlockHeader object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::BlockHeader > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // MerkleBlock
  //
  template <>
  struct class_traits< ::CoinQ::Vault::MerkleBlock >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::MerkleBlock >
  {
    public:
    typedef ::CoinQ::Vault::MerkleBlock object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::MerkleBlock > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TxIn
  //
  template <>
  struct class_traits< ::CoinQ::Vault::TxIn >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::TxIn >
  {
    public:
    typedef ::CoinQ::Vault::TxIn object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::TxIn > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TxOut
  //
  template <>
  struct class_traits< ::CoinQ::Vault::TxOut >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::TxOut >
  {
    public:
    typedef ::CoinQ::Vault::TxOut object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::TxOut > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Tx
  //
  template <>
  struct class_traits< ::CoinQ::Vault::Tx >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::Tx >
  {
    public:
    typedef ::CoinQ::Vault::Tx object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::Tx > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ScriptTag
  //
  template <>
  struct class_traits< ::CoinQ::Vault::ScriptTag >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::ScriptTag >
  {
    public:
    typedef ::CoinQ::Vault::ScriptTag object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::ScriptTag > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Key
  //
  template <>
  struct class_traits< ::CoinQ::Vault::Key >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::Key >
  {
    public:
    typedef ::CoinQ::Vault::Key object_type;
    typedef ::CoinQ::Vault::Key* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Keychain
  //
  template <>
  struct class_traits< ::CoinQ::Vault::Keychain >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::Keychain >
  {
    public:
    typedef ::CoinQ::Vault::Keychain object_type;
    typedef ::CoinQ::Vault::Keychain* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // SigningScript
  //
  template <>
  struct class_traits< ::CoinQ::Vault::SigningScript >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::SigningScript >
  {
    public:
    typedef ::CoinQ::Vault::SigningScript object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::SigningScript > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Account
  //
  template <>
  struct class_traits< ::CoinQ::Vault::Account >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinQ::Vault::Account >
  {
    public:
    typedef ::CoinQ::Vault::Account object_type;
    typedef ::std::shared_ptr< ::CoinQ::Vault::Account > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // AccountView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::AccountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::AccountView >
  {
    public:
    typedef ::CoinQ::Vault::AccountView view_type;
    typedef ::CoinQ::Vault::AccountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // KeychainView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::KeychainView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::KeychainView >
  {
    public:
    typedef ::CoinQ::Vault::KeychainView view_type;
    typedef ::CoinQ::Vault::KeychainView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // TxParentChildView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::TxParentChildView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::TxParentChildView >
  {
    public:
    typedef ::CoinQ::Vault::TxParentChildView view_type;
    typedef ::CoinQ::Vault::TxParentChildView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // TxOutView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::TxOutView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::TxOutView >
  {
    public:
    typedef ::CoinQ::Vault::TxOutView view_type;
    typedef ::CoinQ::Vault::TxOutView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // ConfirmedTxView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::ConfirmedTxView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::ConfirmedTxView >
  {
    public:
    typedef ::CoinQ::Vault::ConfirmedTxView view_type;
    typedef ::CoinQ::Vault::ConfirmedTxView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // SigningScriptView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::SigningScriptView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::SigningScriptView >
  {
    public:
    typedef ::CoinQ::Vault::SigningScriptView view_type;
    typedef ::CoinQ::Vault::SigningScriptView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // ScriptCountView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::ScriptCountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::ScriptCountView >
  {
    public:
    typedef ::CoinQ::Vault::ScriptCountView view_type;
    typedef ::CoinQ::Vault::ScriptCountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // BalanceView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::BalanceView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::BalanceView >
  {
    public:
    typedef ::CoinQ::Vault::BalanceView view_type;
    typedef ::CoinQ::Vault::BalanceView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // BestHeightView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::BestHeightView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::BestHeightView >
  {
    public:
    typedef ::CoinQ::Vault::BestHeightView view_type;
    typedef ::CoinQ::Vault::BestHeightView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // FirstAccountTimeCreatedView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::FirstAccountTimeCreatedView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::FirstAccountTimeCreatedView >
  {
    public:
    typedef ::CoinQ::Vault::FirstAccountTimeCreatedView view_type;
    typedef ::CoinQ::Vault::FirstAccountTimeCreatedView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // AccountTxOutView
  //
  template <>
  struct class_traits< ::CoinQ::Vault::AccountTxOutView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinQ::Vault::AccountTxOutView >
  {
    public:
    typedef ::CoinQ::Vault::AccountTxOutView view_type;
    typedef ::CoinQ::Vault::AccountTxOutView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // BlockHeader
  //
  template <typename A>
  struct query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // height
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    height_type_;

    static const height_type_ height;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // prevhash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    prevhash_type_;

    static const prevhash_type_ prevhash;

    // merkleroot
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    merkleroot_type_;

    static const merkleroot_type_ merkleroot;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // bits
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bits_type_;

    static const bits_type_ bits;

    // nonce
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    nonce_type_;

    static const nonce_type_ nonce;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::hash_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::height_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  height (A::table_name, "\"height\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::version_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::prevhash_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  prevhash (A::table_name, "\"prevhash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::merkleroot_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  merkleroot (A::table_name, "\"merkleroot\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::timestamp_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::bits_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  bits (A::table_name, "\"bits\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::nonce_type_
  query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >::
  nonce (A::table_name, "\"nonce\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >:
    query_columns< ::CoinQ::Vault::BlockHeader, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::BlockHeader >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // height_
      //
      long long height_value;
      bool height_null;

      // version_
      //
      long long version_value;
      bool version_null;

      // prevhash_
      //
      details::buffer prevhash_value;
      std::size_t prevhash_size;
      bool prevhash_null;

      // merkleroot_
      //
      details::buffer merkleroot_value;
      std::size_t merkleroot_size;
      bool merkleroot_null;

      // timestamp_
      //
      long long timestamp_value;
      bool timestamp_null;

      // bits_
      //
      long long bits_value;
      bool bits_null;

      // nonce_
      //
      long long nonce_value;
      bool nonce_null;

      std::size_t version;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >
  {
  };

  // MerkleBlock
  //
  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_type_;

    static const blockheader_type_ blockheader;

    // txcount
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txcount_type_;

    static const txcount_type_ txcount;

    // flags
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    flags_type_;

    static const flags_type_ flags;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::blockheader_type_
  pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::txcount_type_
  pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  txcount (A::table_name, "\"txcount\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::flags_type_
  pointer_query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  flags (A::table_name, "\"flags\"", 0);

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::MerkleBlock >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // blockheader_
      //
      long long blockheader_value;
      bool blockheader_null;

      // txcount_
      //
      long long txcount_value;
      bool txcount_null;

      // flags_
      //
      details::buffer flags_value;
      std::size_t flags_size;
      bool flags_null;

      std::size_t version;
    };

    // hashes_
    //
    struct hashes_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::vector< unsigned char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< hashes_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (data_image_type&, index_type*, const value_type&);

      static void
      init (index_type&, value_type&, const data_image_type&, database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&, statements_type&);

      static void
      load (container_type&, statements_type&);

      static void
      update (const container_type&, statements_type&);

      static void
      erase (statements_type&);
    };

    struct blockheader_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >
  {
  };

  // TxIn
  //
  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // outhash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    outhash_type_;

    static const outhash_type_ outhash;

    // outindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    outindex_type_;

    static const outindex_type_ outindex;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // sequence
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sequence_type_;

    static const sequence_type_ sequence;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::outhash_type_
  pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  outhash (A::table_name, "\"outhash\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::outindex_type_
  pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  outindex (A::table_name, "\"outindex\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::script_type_
  pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::sequence_type_
  pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  sequence (A::table_name, "\"sequence\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::txindex_type_
  pointer_query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::TxIn >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // outhash_
      //
      details::buffer outhash_value;
      std::size_t outhash_size;
      bool outhash_null;

      // outindex_
      //
      long long outindex_value;
      bool outindex_null;

      // script_
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // sequence_
      //
      long long sequence_value;
      bool sequence_null;

      // tx_
      //
      long long tx_value;
      bool tx_null;

      // txindex_
      //
      long long txindex_value;
      bool txindex_null;

      std::size_t version;
    };

    struct tx_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 1UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::TxIn, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >
  {
  };

  // TxOut
  //
  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    value_type_;

    static const value_type_ value;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;

    // spent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    spent_type_;

    static const spent_type_ spent;

    // signingscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    signingscript_type_;

    static const signingscript_type_ signingscript;

    // account_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_id_type_;

    static const account_id_type_ account_id;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::TxOut::type_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::value_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::script_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::txindex_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::spent_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  spent (A::table_name, "\"spent\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::signingscript_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  signingscript (A::table_name, "\"signingscript\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::account_id_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  account_id (A::table_name, "\"account_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::type_type_
  pointer_query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  type (A::table_name, "\"type\"", 0);

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::TxOut >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // value_
      //
      long long value_value;
      bool value_null;

      // script_
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // tx_
      //
      long long tx_value;
      bool tx_null;

      // txindex_
      //
      long long txindex_value;
      bool txindex_null;

      // spent_
      //
      long long spent_value;
      bool spent_null;

      // signingscript_
      //
      long long signingscript_value;
      bool signingscript_null;

      // account_id_
      //
      long long account_id_value;
      bool account_id_null;

      // type_
      //
      long long type_value;
      bool type_null;

      std::size_t version;
    };

    struct tx_tag;
    struct spent_tag;
    struct signingscript_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 1UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::TxOut, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >
  {
  };

  // Tx
  //
  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // locktime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    locktime_type_;

    static const locktime_type_ locktime;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::Tx::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // have_fee
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    have_fee_type_;

    static const have_fee_type_ have_fee;

    // fee
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fee_type_;

    static const fee_type_ fee;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_type_;

    static const blockheader_type_ blockheader;

    // blockindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockindex_type_;

    static const blockindex_type_ blockindex;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::hash_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::version_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::locktime_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  locktime (A::table_name, "\"locktime\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::timestamp_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::status_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::have_fee_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  have_fee (A::table_name, "\"have_fee\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::fee_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  fee (A::table_name, "\"fee\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::blockheader_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::blockindex_type_
  pointer_query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  blockindex (A::table_name, "\"blockindex\"", 0);

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::Tx >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // version_
      //
      long long version_value;
      bool version_null;

      // locktime_
      //
      long long locktime_value;
      bool locktime_null;

      // timestamp_
      //
      long long timestamp_value;
      bool timestamp_null;

      // status_
      //
      long long status_value;
      bool status_null;

      // have_fee_
      //
      long long have_fee_value;
      bool have_fee_null;

      // fee_
      //
      long long fee_value;
      bool fee_null;

      // blockheader_
      //
      long long blockheader_value;
      bool blockheader_null;

      // blockindex_
      //
      long long blockindex_value;
      bool blockindex_null;

      std::size_t version;
    };

    // txins_
    //
    struct txins_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinQ::Vault::Tx::txins_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< txins_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (data_image_type&, index_type*, const value_type&);

      static void
      init (index_type&, value_type&, const data_image_type&, database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&, statements_type&);

      static void
      load (container_type&, statements_type&);

      static void
      update (const container_type&, statements_type&);

      static void
      erase (statements_type&);
    };

    // txouts_
    //
    struct txouts_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinQ::Vault::Tx::txouts_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< txouts_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (data_image_type&, index_type*, const value_type&);

      static void
      init (index_type&, value_type&, const data_image_type&, database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&, statements_type&);

      static void
      load (container_type&, statements_type&);

      static void
      update (const container_type&, statements_type&);

      static void
      erase (statements_type&);
    };

    struct blockheader_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 10UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Tx, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >
  {
  };

  // ScriptTag
  //
  template <typename A>
  struct query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // txoutscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txoutscript_type_;

    static const txoutscript_type_ txoutscript;

    // description
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    description_type_;

    static const description_type_ description;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >::txoutscript_type_
  query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >::
  txoutscript (A::table_name, "\"txoutscript\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >::description_type_
  query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >::
  description (A::table_name, "\"description\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >:
    query_columns< ::CoinQ::Vault::ScriptTag, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::ScriptTag >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // txoutscript_
      //
      details::buffer txoutscript_value;
      std::size_t txoutscript_size;
      bool txoutscript_null;

      // description_
      //
      details::buffer description_value;
      std::size_t description_size;
      bool description_null;

      std::size_t version;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >
  {
  };

  // Key
  //
  template <typename A>
  struct query_columns< ::CoinQ::Vault::Key, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // pubkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    pubkey_type_;

    static const pubkey_type_ pubkey;

    // privkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::vector< unsigned char >,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    privkey_type_;

    static const privkey_type_ privkey;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Key, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::Key, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Key, id_sqlite, A >::pubkey_type_
  query_columns< ::CoinQ::Vault::Key, id_sqlite, A >::
  pubkey (A::table_name, "\"pubkey\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Key, id_sqlite, A >::privkey_type_
  query_columns< ::CoinQ::Vault::Key, id_sqlite, A >::
  privkey (A::table_name, "\"privkey\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::Key, id_sqlite, A >:
    query_columns< ::CoinQ::Vault::Key, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::Key >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // pubkey_
      //
      details::buffer pubkey_value;
      std::size_t pubkey_size;
      bool pubkey_null;

      // privkey_
      //
      details::buffer privkey_value;
      std::size_t privkey_size;
      bool privkey_null;

      std::size_t version;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Key, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >
  {
  };

  // Keychain
  //
  template <typename A>
  struct query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::Keychain::type_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // extkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    extkey_type_;

    static const extkey_type_ extkey;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // numkeys
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    numkeys_type_;

    static const numkeys_type_ numkeys;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::name_type_
  query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::type_type_
  query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::extkey_type_
  query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::
  extkey (A::table_name, "\"extkey\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::hash_type_
  query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::numkeys_type_
  query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >::
  numkeys (A::table_name, "\"numkeys\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >:
    query_columns< ::CoinQ::Vault::Keychain, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::Keychain >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // type_
      //
      long long type_value;
      bool type_null;

      // extkey_
      //
      details::buffer extkey_value;
      std::size_t extkey_size;
      bool extkey_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // numkeys_
      //
      long long numkeys_value;
      bool numkeys_null;

      std::size_t version;
    };

    // keys_
    //
    struct keys_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinQ::Vault::Keychain::keys_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< keys_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (data_image_type&, index_type*, const value_type&);

      static void
      init (index_type&, value_type&, const data_image_type&, database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&, statements_type&);

      static void
      load (container_type&, statements_type&);

      static void
      update (const container_type&, statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Keychain, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >
  {
  };

  // SigningScript
  //
  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    label_type_;

    static const label_type_ label;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::SigningScript::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // txinscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txinscript_type_;

    static const txinscript_type_ txinscript;

    // txoutscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txoutscript_type_;

    static const txoutscript_type_ txoutscript;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::label_type_
  pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  label (A::table_name, "\"label\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::status_type_
  pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::txinscript_type_
  pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  txinscript (A::table_name, "\"txinscript\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::txoutscript_type_
  pointer_query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  txoutscript (A::table_name, "\"txoutscript\"", 0);

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::SigningScript >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // label_
      //
      details::buffer label_value;
      std::size_t label_size;
      bool label_null;

      // status_
      //
      long long status_value;
      bool status_null;

      // txinscript_
      //
      details::buffer txinscript_value;
      std::size_t txinscript_size;
      bool txinscript_null;

      // txoutscript_
      //
      details::buffer txoutscript_value;
      std::size_t txoutscript_size;
      bool txoutscript_null;

      // account_
      //
      long long account_value;
      bool account_null;

      std::size_t version;
    };

    // txouts_
    //
    struct txouts_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinQ::Vault::Tx::txouts_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< txouts_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (value_type&, const data_image_type&, database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&, statements_type&);
    };

    struct account_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 1UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >
  {
  };

  // Account
  //
  template <typename A>
  struct query_columns< ::CoinQ::Vault::Account, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // minsigs
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    minsigs_type_;

    static const minsigs_type_ minsigs;

    // time_created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    time_created_type_;

    static const time_created_type_ time_created;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::name_type_
  query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::minsigs_type_
  query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::
  minsigs (A::table_name, "\"minsigs\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::time_created_type_
  query_columns< ::CoinQ::Vault::Account, id_sqlite, A >::
  time_created (A::table_name, "\"time_created\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinQ::Vault::Account, id_sqlite, A >:
    query_columns< ::CoinQ::Vault::Account, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >:
    public access::object_traits< ::CoinQ::Vault::Account >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // minsigs_
      //
      long long minsigs_value;
      bool minsigs_null;

      // time_created_
      //
      long long time_created_value;
      bool time_created_null;

      std::size_t version;
    };

    // keychain_hashes_
    //
    struct keychain_hashes_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::set< ::std::vector< unsigned char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::value_type value_type;

      typedef set_functions<value_type> functions_type;
      typedef sqlite::container_statements< keychain_hashes_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (data_image_type&, const value_type&);

      static void
      init (value_type&, const data_image_type&, database*);

      static void
      insert (const value_type&, void*);

      static bool
      select (value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&, statements_type&);

      static void
      load (container_type&, statements_type&);

      static void
      update (const container_type&, statements_type&);

      static void
      erase (statements_type&);
    };

    // signingscripts_
    //
    struct signingscripts_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinQ::Vault::Account::signingscripts_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< signingscripts_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&, bool*);

      static void
      init (data_image_type&, index_type*, const value_type&);

      static void
      init (index_type&, value_type&, const data_image_type&, database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&, statements_type&);

      static void
      load (container_type&, statements_type&);

      static void
      update (const container_type&, statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  template <>
  class access::object_traits_impl< ::CoinQ::Vault::Account, id_common >:
    public access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >
  {
  };

  // AccountView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::AccountView >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // minsigs
      //
      long long minsigs_value;
      bool minsigs_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::AccountView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >
  {
  };

  // KeychainView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::KeychainView >
  {
    public:
    struct image_type
    {
      // account_name
      //
      details::buffer account_name_value;
      std::size_t account_name_size;
      bool account_name_null;

      // keychain_name
      //
      details::buffer keychain_name_value;
      std::size_t keychain_name_size;
      bool keychain_name_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >
  {
  };

  // TxParentChildView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::TxParentChildView >
  {
    public:
    struct image_type
    {
      // parent_id
      //
      long long parent_id_value;
      bool parent_id_null;

      // parent_hash
      //
      details::buffer parent_hash_value;
      std::size_t parent_hash_size;
      bool parent_hash_null;

      // child_id
      //
      long long child_id_value;
      bool child_id_null;

      // child_hash
      //
      details::buffer child_hash_value;
      std::size_t child_hash_size;
      bool child_hash_null;

      // txout_id
      //
      long long txout_id_value;
      bool txout_id_null;

      // txin_id
      //
      long long txin_id_value;
      bool txin_id_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    struct parent_tx_tag;
    struct child_tx_tag;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 6UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >
  {
  };

  // TxOutView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::TxOutView >
  {
    public:
    struct image_type
    {
      // account_id
      //
      long long account_id_value;
      bool account_id_null;

      // account_name
      //
      details::buffer account_name_value;
      std::size_t account_name_size;
      bool account_name_null;

      // signingscript_id
      //
      long long signingscript_id_value;
      bool signingscript_id_null;

      // signingscript_label
      //
      details::buffer signingscript_label_value;
      std::size_t signingscript_label_size;
      bool signingscript_label_null;

      // signingscript_status
      //
      long long signingscript_status_value;
      bool signingscript_status_null;

      // signingscript_txinscript
      //
      details::buffer signingscript_txinscript_value;
      std::size_t signingscript_txinscript_size;
      bool signingscript_txinscript_null;

      // script
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // value
      //
      long long value_value;
      bool value_null;

      // txhash
      //
      details::buffer txhash_value;
      std::size_t txhash_size;
      bool txhash_null;

      // txtimestamp
      //
      long long txtimestamp_value;
      bool txtimestamp_null;

      // txstatus
      //
      long long txstatus_value;
      bool txstatus_null;

      // txindex
      //
      long long txindex_value;
      bool txindex_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 12UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >
  {
  };

  // ConfirmedTxView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::ConfirmedTxView >
  {
    public:
    struct image_type
    {
      // tx_id
      //
      long long tx_id_value;
      bool tx_id_null;

      // txhash
      //
      details::buffer txhash_value;
      std::size_t txhash_size;
      bool txhash_null;

      // merkleblock_id
      //
      long long merkleblock_id_value;
      bool merkleblock_id_null;

      // blockheader_id
      //
      long long blockheader_id_value;
      bool blockheader_id_null;

      // blockhash
      //
      details::buffer blockhash_value;
      std::size_t blockhash_size;
      bool blockhash_null;

      // blockheight
      //
      long long blockheight_value;
      bool blockheight_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 6UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >
  {
  };

  // SigningScriptView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::SigningScriptView >
  {
    public:
    struct image_type
    {
      // account_id
      //
      long long account_id_value;
      bool account_id_null;

      // account_name
      //
      details::buffer account_name_value;
      std::size_t account_name_size;
      bool account_name_null;

      // id
      //
      long long id_value;
      bool id_null;

      // label
      //
      details::buffer label_value;
      std::size_t label_size;
      bool label_null;

      // status
      //
      long long status_value;
      bool status_null;

      // txinscript
      //
      details::buffer txinscript_value;
      std::size_t txinscript_size;
      bool txinscript_null;

      // txoutscript
      //
      details::buffer txoutscript_value;
      std::size_t txoutscript_size;
      bool txoutscript_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 7UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >
  {
  };

  // ScriptCountView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::ScriptCountView >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >
  {
  };

  // BalanceView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::BalanceView >
  {
    public:
    struct image_type
    {
      // balance
      //
      long long balance_value;
      bool balance_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >
  {
  };

  // BestHeightView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::BestHeightView >
  {
    public:
    struct image_type
    {
      // best_height
      //
      long long best_height_value;
      bool best_height_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >
  {
  };

  // FirstAccountTimeCreatedView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::FirstAccountTimeCreatedView >
  {
    public:
    struct image_type
    {
      // time_created
      //
      long long time_created_value;
      bool time_created_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >
  {
  };

  // AccountTxOutView
  //
  template <>
  class access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >:
    public access::view_traits< ::CoinQ::Vault::AccountTxOutView >
  {
    public:
    struct image_type
    {
      // account_id
      //
      long long account_id_value;
      bool account_id_null;

      // account_name
      //
      details::buffer account_name_value;
      std::size_t account_name_size;
      bool account_name_null;

      // script
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // value
      //
      long long value_value;
      bool value_null;

      // type
      //
      long long type_value;
      bool type_null;

      // scripttag_id
      //
      long long scripttag_id_value;
      bool scripttag_id_null;

      // description
      //
      details::buffer description_value;
      std::size_t description_size;
      bool description_null;

      // txid
      //
      long long txid_value;
      bool txid_null;

      // txhash
      //
      details::buffer txhash_value;
      std::size_t txhash_size;
      bool txhash_null;

      // txtimestamp
      //
      long long txtimestamp_value;
      bool txtimestamp_null;

      // txstatus
      //
      long long txstatus_value;
      bool txstatus_null;

      // have_fee
      //
      long long have_fee_value;
      bool have_fee_null;

      // fee
      //
      long long fee_value;
      bool fee_null;

      // txindex
      //
      long long txindex_value;
      bool txindex_null;

      // height
      //
      long long height_value;
      bool height_null;

      // block_timestamp
      //
      long long block_timestamp_value;
      bool block_timestamp_null;

      // block_hash
      //
      details::buffer block_hash_value;
      std::size_t block_hash_size;
      bool block_hash_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&);

    static void
    init (view_type&, const image_type&, database*);

    static const std::size_t column_count = 17UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_common >:
    public access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >
  {
  };

  // BlockHeader
  //
  // MerkleBlock
  //
  template <>
  struct alias_traits<
    ::CoinQ::Vault::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::blockheader_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinQ::Vault::MerkleBlock, id_sqlite >
  {
    // blockheader
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::BlockHeader,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::blockheader_tag>
    blockheader_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >:
    query_columns_base< ::CoinQ::Vault::MerkleBlock, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::BlockHeader,
        id_sqlite,
        blockheader_alias_ > >
    blockheader_pointer_type_;

    struct blockheader_type_: blockheader_pointer_type_, blockheader_column_type_
    {
      blockheader_type_ (const char* t, const char* c, const char* conv)
        : blockheader_column_type_ (t, c, conv)
      {
      }
    };

    static const blockheader_type_ blockheader;

    // txcount
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txcount_type_;

    static const txcount_type_ txcount;

    // flags
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    flags_type_;

    static const flags_type_ flags;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::blockheader_type_
  query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::txcount_type_
  query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  txcount (A::table_name, "\"txcount\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::flags_type_
  query_columns< ::CoinQ::Vault::MerkleBlock, id_sqlite, A >::
  flags (A::table_name, "\"flags\"", 0);

  // TxIn
  //
  template <>
  struct alias_traits<
    ::CoinQ::Vault::Tx,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinQ::Vault::TxIn, id_sqlite >
  {
    // tx
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::tx_tag>
    tx_alias_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::Tx,
        id_sqlite,
        tx_alias_ > >
    tx_type_ ;

    static const tx_type_ tx;
  };

  template <typename A>
  struct query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >:
    query_columns_base< ::CoinQ::Vault::TxIn, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // outhash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    outhash_type_;

    static const outhash_type_ outhash;

    // outindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    outindex_type_;

    static const outindex_type_ outindex;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // sequence
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sequence_type_;

    static const sequence_type_ sequence;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::outhash_type_
  query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  outhash (A::table_name, "\"outhash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::outindex_type_
  query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  outindex (A::table_name, "\"outindex\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::script_type_
  query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::sequence_type_
  query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  sequence (A::table_name, "\"sequence\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::txindex_type_
  query_columns< ::CoinQ::Vault::TxIn, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  // TxOut
  //
  template <>
  struct alias_traits<
    ::CoinQ::Vault::Tx,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinQ::Vault::TxIn,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::spent_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinQ::Vault::SigningScript,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::signingscript_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinQ::Vault::TxOut, id_sqlite >
  {
    // tx
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::tx_tag>
    tx_alias_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::Tx,
        id_sqlite,
        tx_alias_ > >
    tx_type_ ;

    static const tx_type_ tx;

    // spent
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::TxIn,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::spent_tag>
    spent_alias_;

    // signingscript
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::SigningScript,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::signingscript_tag>
    signingscript_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >:
    query_columns_base< ::CoinQ::Vault::TxOut, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    value_type_;

    static const value_type_ value;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;

    // spent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    spent_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::TxIn,
        id_sqlite,
        spent_alias_ > >
    spent_pointer_type_;

    struct spent_type_: spent_pointer_type_, spent_column_type_
    {
      spent_type_ (const char* t, const char* c, const char* conv)
        : spent_column_type_ (t, c, conv)
      {
      }
    };

    static const spent_type_ spent;

    // signingscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    signingscript_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::SigningScript,
        id_sqlite,
        signingscript_alias_ > >
    signingscript_pointer_type_;

    struct signingscript_type_: signingscript_pointer_type_, signingscript_column_type_
    {
      signingscript_type_ (const char* t, const char* c, const char* conv)
        : signingscript_column_type_ (t, c, conv)
      {
      }
    };

    static const signingscript_type_ signingscript;

    // account_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_id_type_;

    static const account_id_type_ account_id;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::TxOut::type_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::value_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::script_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::txindex_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::spent_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  spent (A::table_name, "\"spent\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::signingscript_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  signingscript (A::table_name, "\"signingscript\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::account_id_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  account_id (A::table_name, "\"account_id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::type_type_
  query_columns< ::CoinQ::Vault::TxOut, id_sqlite, A >::
  type (A::table_name, "\"type\"", 0);

  // Tx
  //
  template <>
  struct alias_traits<
    ::CoinQ::Vault::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::blockheader_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinQ::Vault::Tx, id_sqlite >
  {
    // blockheader
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::BlockHeader,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::blockheader_tag>
    blockheader_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >:
    query_columns_base< ::CoinQ::Vault::Tx, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // locktime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    locktime_type_;

    static const locktime_type_ locktime;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::Tx::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // have_fee
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    have_fee_type_;

    static const have_fee_type_ have_fee;

    // fee
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fee_type_;

    static const fee_type_ fee;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::BlockHeader,
        id_sqlite,
        blockheader_alias_ > >
    blockheader_pointer_type_;

    struct blockheader_type_: blockheader_pointer_type_, blockheader_column_type_
    {
      blockheader_type_ (const char* t, const char* c, const char* conv)
        : blockheader_column_type_ (t, c, conv)
      {
      }
    };

    static const blockheader_type_ blockheader;

    // blockindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockindex_type_;

    static const blockindex_type_ blockindex;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::hash_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::version_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::locktime_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  locktime (A::table_name, "\"locktime\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::timestamp_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::status_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::have_fee_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  have_fee (A::table_name, "\"have_fee\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::fee_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  fee (A::table_name, "\"fee\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::blockheader_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::blockindex_type_
  query_columns< ::CoinQ::Vault::Tx, id_sqlite, A >::
  blockindex (A::table_name, "\"blockindex\"", 0);

  // ScriptTag
  //
  // Key
  //
  // Keychain
  //
  // SigningScript
  //
  template <>
  struct alias_traits<
    ::CoinQ::Vault::Account,
    id_sqlite,
    access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::account_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinQ::Vault::SigningScript, id_sqlite >
  {
    // account
    //
    typedef
    odb::alias_traits<
      ::CoinQ::Vault::Account,
      id_sqlite,
      access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::account_tag>
    account_alias_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinQ::Vault::Account,
        id_sqlite,
        account_alias_ > >
    account_type_ ;

    static const account_type_ account;
  };

  template <typename A>
  struct query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >:
    query_columns_base< ::CoinQ::Vault::SigningScript, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    label_type_;

    static const label_type_ label;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinQ::Vault::SigningScript::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // txinscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txinscript_type_;

    static const txinscript_type_ txinscript;

    // txoutscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txoutscript_type_;

    static const txoutscript_type_ txoutscript;
  };

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::id_type_
  query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::label_type_
  query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  label (A::table_name, "\"label\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::status_type_
  query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::txinscript_type_
  query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  txinscript (A::table_name, "\"txinscript\"", 0);

  template <typename A>
  const typename query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::txoutscript_type_
  query_columns< ::CoinQ::Vault::SigningScript, id_sqlite, A >::
  txoutscript (A::table_name, "\"txoutscript\"", 0);

  // Account
  //
  // AccountView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::AccountView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
  {
  };

  // KeychainView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::KeychainView, id_sqlite >::query_columns
  {
    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
    Account;

    // Keychain
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Keychain,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite > >
    Keychain;
  };

  // TxParentChildView
  //
  template <>
  struct alias_traits<
    ::CoinQ::Vault::Tx,
    id_sqlite,
    access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::parent_tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinQ::Vault::Tx,
    id_sqlite,
    access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::child_tx_tag>
  {
    static const char table_name[];
  };

  struct access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::query_columns
  {
    // TxOut
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::TxOut,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite > >
    TxOut;

    // TxIn
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::TxIn,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite > >
    TxIn;

    // parent_tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      odb::alias_traits< ::CoinQ::Vault::Tx,
        id_sqlite,
        access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::parent_tx_tag> >
    parent_tx;

    // child_tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      odb::alias_traits< ::CoinQ::Vault::Tx,
        id_sqlite,
        access::view_traits_impl< ::CoinQ::Vault::TxParentChildView, id_sqlite >::child_tx_tag> >
    child_tx;
  };

  // TxOutView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::TxOutView, id_sqlite >::query_columns
  {
    // TxOut
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::TxOut,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite > >
    TxOut;

    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite > >
    Tx;

    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite > >
    SigningScript;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
    Account;
  };

  // ConfirmedTxView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::ConfirmedTxView, id_sqlite >::query_columns
  {
    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite > >
    Tx;

    // MerkleBlock
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::MerkleBlock,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite > >
    MerkleBlock;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite > >
    BlockHeader;
  };

  // SigningScriptView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::SigningScriptView, id_sqlite >::query_columns
  {
    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite > >
    SigningScript;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
    Account;
  };

  // ScriptCountView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::ScriptCountView, id_sqlite >::query_columns
  {
    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite > >
    SigningScript;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
    Account;
  };

  // BalanceView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::BalanceView, id_sqlite >::query_columns
  {
    // TxOut
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::TxOut,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite > >
    TxOut;

    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite > >
    Tx;

    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite > >
    SigningScript;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
    Account;
  };

  // BestHeightView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::BestHeightView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinQ::Vault::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite > >
  {
  };

  // FirstAccountTimeCreatedView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::FirstAccountTimeCreatedView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
  {
  };

  // AccountTxOutView
  //
  struct access::view_traits_impl< ::CoinQ::Vault::AccountTxOutView, id_sqlite >::query_columns
  {
    // TxOut
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::TxOut,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite > >
    TxOut;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite > >
    Account;

    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite > >
    Tx;

    // ScriptTag
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::ScriptTag,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite > >
    ScriptTag;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinQ::Vault::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite > >
    BlockHeader;
  };
}

#include "CoinQ_vault_db-odb.ixx"

#include <odb/post.hxx>

#endif // COIN_Q_VAULT_DB_ODB_HXX
