// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // BlockHeader
  //

  inline
  access::object_traits< ::CoinQ::Vault::BlockHeader >::id_type
  access::object_traits< ::CoinQ::Vault::BlockHeader >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::BlockHeader >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::BlockHeader >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MerkleBlock
  //

  inline
  access::object_traits< ::CoinQ::Vault::MerkleBlock >::id_type
  access::object_traits< ::CoinQ::Vault::MerkleBlock >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::MerkleBlock >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::MerkleBlock >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxIn
  //

  inline
  access::object_traits< ::CoinQ::Vault::TxIn >::id_type
  access::object_traits< ::CoinQ::Vault::TxIn >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::TxIn >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::TxIn >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxOut
  //

  inline
  access::object_traits< ::CoinQ::Vault::TxOut >::id_type
  access::object_traits< ::CoinQ::Vault::TxOut >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::TxOut >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::TxOut >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Tx
  //

  inline
  access::object_traits< ::CoinQ::Vault::Tx >::id_type
  access::object_traits< ::CoinQ::Vault::Tx >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Tx >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Tx >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ScriptTag
  //

  inline
  access::object_traits< ::CoinQ::Vault::ScriptTag >::id_type
  access::object_traits< ::CoinQ::Vault::ScriptTag >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::ScriptTag >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::ScriptTag >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Key
  //

  inline
  access::object_traits< ::CoinQ::Vault::Key >::id_type
  access::object_traits< ::CoinQ::Vault::Key >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Key >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Key >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Keychain
  //

  inline
  access::object_traits< ::CoinQ::Vault::Keychain >::id_type
  access::object_traits< ::CoinQ::Vault::Keychain >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Keychain >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Keychain >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SigningScript
  //

  inline
  access::object_traits< ::CoinQ::Vault::SigningScript >::id_type
  access::object_traits< ::CoinQ::Vault::SigningScript >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::SigningScript >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::SigningScript >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Account
  //

  inline
  access::object_traits< ::CoinQ::Vault::Account >::id_type
  access::object_traits< ::CoinQ::Vault::Account >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Account >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinQ::Vault::Account >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AccountView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::AccountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // KeychainView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::KeychainView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxParentChildView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::TxParentChildView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxOutView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::TxOutView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ConfirmedTxView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::ConfirmedTxView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SigningScriptView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::SigningScriptView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ScriptCountView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::ScriptCountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BalanceView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::BalanceView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BestHeightView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::BestHeightView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FirstAccountTimeCreatedView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::FirstAccountTimeCreatedView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AccountTxOutView
  //

  inline
  void access::view_traits< ::CoinQ::Vault::AccountTxOutView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // BlockHeader
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinQ::Vault::BlockHeader, id_sqlite >::
  load_ (statements_type&, object_type&)
  {
  }

  // MerkleBlock
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::MerkleBlock, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // TxIn
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinQ::Vault::TxIn, id_sqlite >::
  load_ (statements_type&, object_type&)
  {
  }

  // TxOut
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinQ::Vault::TxOut, id_sqlite >::
  load_ (statements_type&, object_type&)
  {
  }

  // Tx
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::Tx, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // ScriptTag
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinQ::Vault::ScriptTag, id_sqlite >::
  load_ (statements_type&, object_type&)
  {
  }

  // Key
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinQ::Vault::Key, id_sqlite >::
  load_ (statements_type&, object_type&)
  {
  }

  // Keychain
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::Keychain, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // SigningScript
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::SigningScript, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Account
  //

  inline
  void access::object_traits_impl< ::CoinQ::Vault::Account, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // AccountView
  //

  // KeychainView
  //

  // TxParentChildView
  //

  // TxOutView
  //

  // ConfirmedTxView
  //

  // SigningScriptView
  //

  // ScriptCountView
  //

  // BalanceView
  //

  // BestHeightView
  //

  // FirstAccountTimeCreatedView
  //

  // AccountTxOutView
  //
}

